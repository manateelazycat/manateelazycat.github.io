<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-04-08T19:23:48+08:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">快速拷贝网页中的代码片段</title><link href="http://localhost:4000/emacs/eaf/2020/04/08/eaf-copy-code.html" rel="alternate" type="text/html" title="快速拷贝网页中的代码片段" /><published>2020-04-08T00:00:00+08:00</published><updated>2020-04-08T00:00:00+08:00</updated><id>http://localhost:4000/emacs/eaf/2020/04/08/eaf-copy-code</id><content type="html" xml:base="http://localhost:4000/emacs/eaf/2020/04/08/eaf-copy-code.html">&lt;p&gt;我们平常在研究技术的时候，经常需要复制网上的代码做实验。遇到代码特别多的时候，需要用鼠标上下拖动来拷贝代码，而且经常容易拷贝出错，非常影响效率。&lt;/p&gt;

&lt;p&gt;今天写了一个&lt;a href=&quot;https://github.com/manateelazycat/emacs-application-framework/commit/018ec8bbadbf8bf3a8ae607fe092c89863cc8302&quot;&gt;补丁&lt;/a&gt; ， 可以做如下操作来快速拷贝网页中的代码片段：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用EAF浏览器打开有代码片段的网页&lt;/li&gt;
  &lt;li&gt;按 C 键调用 insert_or_copy_code 命令，会在网页中搜索所有代码片段的地方，并高亮索引标签，类似Vimium的效果&lt;/li&gt;
  &lt;li&gt;键入相应的索引标签，即可快速拷贝代码标签到系统剪切板&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/eaf-copy-code/eaf-copy-code.gif&quot; alt=&quot;EAF Copy Code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;是不是效率非常高？;)&lt;/p&gt;</content><author><name></name></author><summary type="html">我们平常在研究技术的时候，经常需要复制网上的代码做实验。遇到代码特别多的时候，需要用鼠标上下拖动来拷贝代码，而且经常容易拷贝出错，非常影响效率。</summary></entry><entry><title type="html">解决KDE下FFmpeg录制视频屏幕闪烁的问题</title><link href="http://localhost:4000/linux/2020/04/05/record-flash.html" rel="alternate" type="text/html" title="解决KDE下FFmpeg录制视频屏幕闪烁的问题" /><published>2020-04-05T00:00:00+08:00</published><updated>2020-04-05T00:00:00+08:00</updated><id>http://localhost:4000/linux/2020/04/05/record-flash</id><content type="html" xml:base="http://localhost:4000/linux/2020/04/05/record-flash.html">&lt;p&gt;KDE下，我使用我写的深度录屏录在制程序的时候，发现录制出来的视频一直有闪烁问题，最开始还以为是我代码哪里写错了。&lt;/p&gt;

&lt;p&gt;今天搜索了一下，原来是KDE自己的锅，按照下面的方式设置一下就可以解决这个问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;打开KDE系统设置&lt;/li&gt;
  &lt;li&gt;点击 “显示和监控”&lt;/li&gt;
  &lt;li&gt;点击 “混合器”&lt;/li&gt;
  &lt;li&gt;找到 “避免撕裂（垂直同步）” 选项，从下拉菜单中选择 “从不”&lt;/li&gt;
  &lt;li&gt;保存&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;搞定，哪天有空了，录制一下EAF的使用视频。&lt;/p&gt;</content><author><name></name></author><summary type="html">KDE下，我使用我写的深度录屏录在制程序的时候，发现录制出来的视频一直有闪烁问题，最开始还以为是我代码哪里写错了。</summary></entry><entry><title type="html">Org-Mode 表格对齐设置</title><link href="http://localhost:4000/emacs/2020/04/02/org-font.html" rel="alternate" type="text/html" title="Org-Mode 表格对齐设置" /><published>2020-04-02T00:00:00+08:00</published><updated>2020-04-02T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2020/04/02/org-font</id><content type="html" xml:base="http://localhost:4000/emacs/2020/04/02/org-font.html">&lt;h3 id=&quot;org-mode表格对齐&quot;&gt;Org-Mode表格对齐&lt;/h3&gt;
&lt;p&gt;Emacs的Org-Mode表格功能是大杀器，但对于中文用户来说，比较不爽的是因为中英字体不等宽导致Org-Mode表格无法对齐显示。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tumashu/cnfonts&quot;&gt;cnfonts&lt;/a&gt;是针对这种问题的一种解决方案，通过找到匹配的中英文字体搭配来解决Org-Mode表格不对齐的问题，但是这种方法有一个最显著的副作用是，为了让Org-Mode表格对齐，会造成默认字体的英文字符太窄了，影响编码中字符的识别。虽然cnfonts也可以单独配置Org-Mode的字体，但是折腾也比较复杂。&lt;/p&gt;

&lt;h3 id=&quot;新的方法&quot;&gt;新的方法&lt;/h3&gt;
&lt;p&gt;其实更简单的做法是，利用更纱黑体这个字体来解决表格对齐的问题，因为更纱黑体字体通过融合现有字体实现中文字符的宽度刚好是英文字符宽度的两倍，以此来解决表格对齐的问题。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先通过命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo pacman -S ttf-sarasa-gothic wqy-microhei&lt;/code&gt; 安装好字体&lt;/li&gt;
  &lt;li&gt;然后把下面的配置放入 ~/.emacs 中即可&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;emacs-font-size&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;emacs-font-name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;WenQuanYi Micro Hei Mono&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-frame-font&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%s-%s&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emacs-font-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emacs-font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-fontset-font&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame-parameter&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'unicode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emacs-font-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with-eval-after-load&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'org&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-buffer-face-mode-variable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;make-face&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'width-font-face&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-face-attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'width-font-face&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:font&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;等距更纱黑体 SC 15&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;buffer-face-mode-face&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'width-font-face&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;buffer-face-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'org-mode-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'org-buffer-face-mode-variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面配置的意思是，默认Emacs使用文泉驿字体，Org-Mode使用更纱黑体字体，这样既可以解决Org-Mode表格对齐问题，又避免对Emacs其他模式产生影响。&lt;/p&gt;</content><author><name></name></author><summary type="html">Org-Mode表格对齐 Emacs的Org-Mode表格功能是大杀器，但对于中文用户来说，比较不爽的是因为中英字体不等宽导致Org-Mode表格无法对齐显示。</summary></entry><entry><title type="html">高效创作 Mindmap -&amp;gt; Org-Mode -&amp;gt; Word</title><link href="http://localhost:4000/linux/emacs/2020/04/01/org-to-docx.html" rel="alternate" type="text/html" title="高效创作 Mindmap -&gt; Org-Mode -&gt; Word" /><published>2020-04-01T00:00:00+08:00</published><updated>2020-04-01T00:00:00+08:00</updated><id>http://localhost:4000/linux/emacs/2020/04/01/org-to-docx</id><content type="html" xml:base="http://localhost:4000/linux/emacs/2020/04/01/org-to-docx.html">&lt;p&gt;作为Emacser，最享受在Emacs高效的处理文字，特别是在Emacs中编辑Markdown和Org文件，完全就是一种行云流水的感觉。
但是我们无法让所有的朋友和同事都使用Emacs，特别是有时候要发送公司文件给客户，客户一般都用Word。&lt;/p&gt;

&lt;p&gt;今天就介绍一种在Emacs中编写Org-Mode文件，然后通过Pandoc这个工具导出成Word文档的方法。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先创建一个 test.org 文件，第一行加入Org格式的标题字符串 &lt;code class=&quot;highlighter-rouge&quot;&gt;#+TITLE: 文档标题&lt;/code&gt;, 然后按照Org-Mode格式写文件内容&lt;/li&gt;
  &lt;li&gt;执行命令: &lt;code class=&quot;highlighter-rouge&quot;&gt;pandoc test.org -o test.docx --reference-doc=template.docx&lt;/code&gt; 生成Word文档&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;template.docx 模板文件包含了各种样式细节，它会指导Pandoc按照模板文件相同的样式来转换Word文档，测试时可以下载我的&lt;a href=&quot;https://github.com/manateelazycat/lazycat-emacs/blob/master/site-lisp/template/template.docx&quot;&gt;template.docx&lt;/a&gt;文件。&lt;/p&gt;

&lt;h3 id=&quot;为什么不直接在office中编辑&quot;&gt;为什么不直接在Office中编辑？&lt;/h3&gt;
&lt;p&gt;内容用Org创作，再转换成Word文档，这样做的好处是：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;文本操作效率高：可以利用Emacs强大的编辑命令快速编辑文件内容，而不是在Word中笨拙的操作光标&lt;/li&gt;
  &lt;li&gt;利用Emacs生态：Emacs有很多插件，纯文本的方式非常适合Emacs快速进行搜索和替换等操作&lt;/li&gt;
  &lt;li&gt;利用Org生态：比如切换缩进、按照章节移动、快速修复错误序号等问题都可以通过Org生态工具快速完成，而Word光选择一个大型的段落都要操作好久&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;生成模板文件&quot;&gt;生成模板文件&lt;/h3&gt;
&lt;p&gt;上面的命令中提到控制Word样式的模板文件，其实最简单创建模板的方法是:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;先用命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;pandoc test.org -o template.docx&lt;/code&gt; 生成一个带Pandoc默认样式的Word文档&lt;/li&gt;
  &lt;li&gt;用Office软件打开 template.docx 文件，修改样式成你喜欢的模样&lt;/li&gt;
  &lt;li&gt;保存 template.docx 文件即可&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;emacs中操作&quot;&gt;Emacs中操作&lt;/h3&gt;

&lt;p&gt;Emacs用户可以用我下面的Elisp函数来实现一键自动转换的功能：&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-export-docx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;docx-file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file-name-sans-extension&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;buffer-file-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.docx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;template-file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/path/template.docx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shell-command&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pandoc %s -o %s --reference-doc=%s&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;buffer-file-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;docx-file&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;template-file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Convert finish: %s&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;docx-file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意，需要替换上面代码中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;/path/template.docx&lt;/code&gt; 路径需要替换成你生成模板文件的真实路径。&lt;/p&gt;

&lt;h3 id=&quot;高效创作&quot;&gt;高效创作&lt;/h3&gt;
&lt;p&gt;我平常写文档的实践步骤是&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;理清思路：用EAF思维导图工具做大纲&lt;/li&gt;
  &lt;li&gt;填充内容：EAF思维导图导出Org格式大纲后，填充内容&lt;/li&gt;
  &lt;li&gt;转换格式：Org内容写完后，导出成Word文档给客户&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;同样的文档篇幅，Office软件需要编辑2个小时，通过这些工具链的协作，一般只需要半个小时就可以完成。&lt;/p&gt;

&lt;p&gt;因为给客户的文档都是非常规范的，只需要一次性设置好模板文件的样式，文档大纲和内容样式都可以通过工具自动生成，工具会帮合我们节省大量手动排版的时间，创作时只有关心内容即可，所以效率非常高。&lt;/p&gt;</content><author><name></name></author><summary type="html">作为Emacser，最享受在Emacs高效的处理文字，特别是在Emacs中编辑Markdown和Org文件，完全就是一种行云流水的感觉。 但是我们无法让所有的朋友和同事都使用Emacs，特别是有时候要发送公司文件给客户，客户一般都用Word。</summary></entry><entry><title type="html">Nox内建对微软Python Language Server的支持</title><link href="http://localhost:4000/emacs/nox/2020/03/30/nox-support-microsoft-server.html" rel="alternate" type="text/html" title="Nox内建对微软Python Language Server的支持" /><published>2020-03-30T00:00:00+08:00</published><updated>2020-03-30T00:00:00+08:00</updated><id>http://localhost:4000/emacs/nox/2020/03/30/nox-support-microsoft-server</id><content type="html" xml:base="http://localhost:4000/emacs/nox/2020/03/30/nox-support-microsoft-server.html">&lt;p&gt;微软的VSCode之所以好用，除了LSP协议的标准化外，微软自家的语言服务器在质量和性能也比社区实现的语言服务器要好得多。&lt;/p&gt;

&lt;p&gt;今天通过&lt;a href=&quot;https://github.com/manateelazycat/nox/commit/02708ca6db62993b6611d662348af5f91b369234&quot;&gt;这个补丁&lt;/a&gt;实现了 intelephense 对PHP语法补全的支持，而intelephense正是VSCode内置的PHP语言服务器。&lt;/p&gt;

&lt;p&gt;在Python领域，开源社区的&lt;a href=&quot;https://github.com/palantir/python-language-server&quot;&gt;Python Language Server&lt;/a&gt;主要是基于jedi这个库来实现的，对于大型的Python计算库，比如补全numpy的时候就会卡一下。&lt;/p&gt;

&lt;p&gt;微软自己的Python Language Server – &lt;a href=&quot;https://github.com/microsoft/python-language-server&quot;&gt;mspyls&lt;/a&gt;主要是用C#实现的，性能上要比pyls好很多。&lt;/p&gt;

&lt;p&gt;今天晚上给Nox写了一个补丁&lt;a href=&quot;https://github.com/manateelazycat/nox/commit/7e2502ba2f7afe90de7f86b477247eb8858d19a5&quot;&gt;Use mspyls as default Python Language Server&lt;/a&gt;，实现内建对mspyls的支持。&lt;/p&gt;

&lt;h4 id=&quot;体验mspyls&quot;&gt;体验mspyls&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;下载和安装&lt;a href=&quot;https://github.com/manateelazycat/nox&quot;&gt;Nox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;nox-print-mspyls-download-url&lt;/code&gt; 命令，打印当前操作系统安装包的下载地址&lt;/li&gt;
  &lt;li&gt;下载并解压文件到 ~/.emacs.d/nox/mspyls 目录下，保证目录的根位置有 Microsoft.Python.LanguageServer 这个文件&lt;/li&gt;
  &lt;li&gt;给mspyls索引权限: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo chmod +x -R  ~/.emacs.d/nox/mspyls&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;直接打开 python 文件，即可快速进行语法补全&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;注意&quot;&gt;注意&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;mspyls在语法补全之前会索引项目的文件，请不要直接在 HOME 目录下创建单文件进行语法补全测试，如果你的 HOME 目录文件很多，索引甚至会持续10多分钟&lt;/li&gt;
  &lt;li&gt;测试建议在HOME下建立一个test的空文件夹，然后再在test文件夹里面创建单文件来测试&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;mspyls-和-pyls-的优缺点&quot;&gt;mspyls 和 pyls 的优缺点&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;pyls: 基于jedi实现的，不建索引，大型Python库的语法补全比较慢&lt;/li&gt;
  &lt;li&gt;mspyls: 用C# 实现的，补全速度快，但是在巨型目录下，首次索引比较慢&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nox默认使用mspyls作为Python的默认语言服务器，如果要切换回开源社区的 pyls ，直接修改默认服务器的设置即可：&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nox-python-server&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pyls&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;感谢&quot;&gt;感谢&lt;/h4&gt;
&lt;p&gt;感谢Emacs-China和Github社区朋友的帮助，让我这个老年人可以早点睡觉, 特别是 &lt;a href=&quot;https://github.com/theFool32&quot;&gt;theFool32&lt;/a&gt;和&lt;a href=&quot;https://github.com/seagle0128&quot;&gt;seagle0128&lt;/a&gt;的支持，在我解题解到山穷水尽时，给我柳暗花明的灵感和帮助。;)&lt;/p&gt;</content><author><name></name></author><summary type="html">微软的VSCode之所以好用，除了LSP协议的标准化外，微软自家的语言服务器在质量和性能也比社区实现的语言服务器要好得多。</summary></entry><entry><title type="html">Nox - 轻量级LSP客户端</title><link href="http://localhost:4000/emacs/nox/2020/03/29/nox.html" rel="alternate" type="text/html" title="Nox - 轻量级LSP客户端" /><published>2020-03-29T00:00:00+08:00</published><updated>2020-03-29T00:00:00+08:00</updated><id>http://localhost:4000/emacs/nox/2020/03/29/nox</id><content type="html" xml:base="http://localhost:4000/emacs/nox/2020/03/29/nox.html">&lt;h3 id=&quot;lsp&quot;&gt;LSP&lt;/h3&gt;
&lt;p&gt;Emacs，因其丰富的插件生态和高度一致的协同环境，不论敲代码还是写文章都有行云流水的感觉。
一直以来Emacs的短板都在智能语法补全上，不能像VSCode那样非常智能的补全代码。&lt;/p&gt;

&lt;p&gt;随着VSCode的流行和微软在开源社区的发力，LSP（编程语言服务器协议）逐渐发展成为代码智能补全领域的佼佼者。
通过标准的LSP协议，只用为编辑器或IDE开发一款LSP客户端，即可对所有的编
程语言提供智能补全支持，以解决原来众多编辑器（N）和补全后端（M）相互组
合产生的 M x N 问题，避免了大家反复造轮子，可以集中社区更多的资源在语
言服务器后端的开发和优化上。&lt;/p&gt;

&lt;h3 id=&quot;协议研究&quot;&gt;协议研究&lt;/h3&gt;
&lt;p&gt;Emacs目前也有两个LSP客户端: &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode&quot;&gt;lsp-mode&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/joaotavora/eglot&quot;&gt;eglot&lt;/a&gt;, 但是这两个客户端的性能却不是很好，特别是lsp-mode, 写一会代码就会卡一下，非常影响编程思路。&lt;/p&gt;

&lt;p&gt;周末完整的研读了LSP的&lt;a href=&quot;https://microsoft.github.io/language-server-protocol/specifications/specification-current/&quot;&gt;协议规范细节&lt;/a&gt;, 并调研了Rust, Golang和Python的JSONRPC库用法，最后决定用Python来实现一个新的LSP代理客户端，因为Python有完整的多线程支持，所以不会出现预想的LSP数据流堵塞Emacs输入的问题。&lt;/p&gt;

&lt;p&gt;经过昨天一天的研究和调试，发现其实LSP Server在代码补全时返回的数据并不
大，为什么lsp-mode和eglot还会卡住Emacs呢？难道不是之前猜想的Elisp解析JSON慢的问题？&lt;/p&gt;

&lt;p&gt;为了弄明白性能瓶颈，随即裁剪了Eglot进行对比测试，主要针对代码补全以外的功能进行裁剪&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;用posframe替代eldoc来显示文档，避免每次输入一个单词就从服务器请求一次文档&lt;/li&gt;
  &lt;li&gt;去掉了所有LSP Server返回的代码诊断消息和处理函数，并从Eglot中移除
flymake相关的代码&lt;/li&gt;
  &lt;li&gt;默认只补全符号，并禁止补全代码模板，因为yasnippet的参数选中状态很容易消
失，一旦模板代码写错了，要修改调整反而效率更低&lt;/li&gt;
  &lt;li&gt;去掉 documentHighlight 协议，没啥用，反而经常通过overlay污染代码空间&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通过上面的裁剪过后，Eglot居然异常流畅，真是喜出望外啊。&lt;/p&gt;

&lt;h3 id=&quot;nox&quot;&gt;Nox&lt;/h3&gt;
&lt;p&gt;在Eglot的代码基础之上，今天发布了新的Emacs LSP客户端 – &lt;a href=&quot;https://github.com/manateelazycat/nox&quot;&gt;Nox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;目前Nox已经支持以下编程语言：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Javascript: &lt;a href=&quot;https://github.com/sourcegraph/javascript-typescript-langserver&quot;&gt;javascript-typescript-stdio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Rust: &lt;a href=&quot;https://github.com/rust-lang-nursery/rls&quot;&gt;rls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Python: &lt;a href=&quot;https://github.com/palantir/python-language-server&quot;&gt;pyls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/castwide/solargraph&quot;&gt;solargraph&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Java: &lt;a href=&quot;https://github.com/eclipse/eclipse.jdt.ls&quot;&gt;Eclipse JDT Language Server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Bash: &lt;a href=&quot;https://github.com/mads-hartmann/bash-language-server&quot;&gt;bash-language-server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;PHP: &lt;a href=&quot;https://github.com/felixfbecker/php-language-server&quot;&gt;php-language-server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;C/C++: &lt;a href=&quot;https://github.com/MaskRay/ccls&quot;&gt;ccls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Haskell: &lt;a href=&quot;https://github.com/haskell/haskell-ide-engine&quot;&gt;IDE engine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Elm: &lt;a href=&quot;https://github.com/elm-tooling/elm-language-server&quot;&gt;elm-language-server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Kotlin: &lt;a href=&quot;https://github.com/fwcd/KotlinLanguageServer&quot;&gt;kotlin-language-server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Go: &lt;a href=&quot;https://github.com/golang/go/wiki/gopls&quot;&gt;gopls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ocaml: &lt;a href=&quot;https://github.com/freebroccolo/ocaml-language-server&quot;&gt;ocaml-language-server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;R: &lt;a href=&quot;https://cran.r-project.org/package=languageserver&quot;&gt;languageserver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Dart: &lt;a href=&quot;https://github.com/natebosch/dart_language_server&quot;&gt;dart_language_server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Elixir: &lt;a href=&quot;https://github.com/JakeBecker/elixir-ls&quot;&gt;elixir-ls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ada: &lt;a href=&quot;https://github.com/AdaCore/ada_language_server&quot;&gt;ada_language_server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Scala: &lt;a href=&quot;http://scalameta.org/metals/&quot;&gt;metals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;TeX/LaTeX: &lt;a href=&quot;https://github.com/astoff/digestif&quot;&gt;Digestif&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Dockerfile: &lt;a href=&quot;https://github.com/rcjsuen/dockerfile-language-server-nodejs&quot;&gt;dockerfile_language_server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;HTML &lt;a href=&quot;https://github.com/Microsoft/vscode/tree/master/extensions/html-language-features/server&quot;&gt;html_language_server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;CSS: &lt;a href=&quot;https://github.com/Microsoft/vscode/tree/master/extensions/css-language-features/server&quot;&gt;css_language_server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JSON: &lt;a href=&quot;https://www.npmjs.com/package/vscode-json-languageserver&quot;&gt;json_language_server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/nox/nox.png&quot; alt=&quot;Nox&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nox的项目目标主要有三个：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;功能上：只提供代码补全、代码定义跳转、代码引用和重命名功能这四个最核心的功能&lt;/li&gt;
  &lt;li&gt;设计上：保持界面交互简洁无打扰, 不会像 lsp-ui 提供花里胡哨的功能，减少对用户专注力的干扰&lt;/li&gt;
  &lt;li&gt;性能上：裁剪无用功能, 优化代码效率，保证代码补全时的流畅手感&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在我看来，像语法检测和代码模板，flycheck以及yasnippet这些插件的资源占
用率更低，也更为专业。&lt;/p&gt;

&lt;p&gt;如果你追求LSP所有功能，lsp-mode和Eglot是更好的选择，如果你追求极致的编
码流畅度，Nox肯定是目前用户体验和性能最好的LSP客户端。&lt;/p&gt;

&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;先安装依赖组件 &lt;a href=&quot;https://github.com/company-mode/company-mode&quot;&gt;company-mode&lt;/a&gt;和&lt;a href=&quot;https://github.com/tumashu/posframe&quot;&gt;posframe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;拷贝&lt;a href=&quot;https://github.com/manateelazycat/nox&quot;&gt;Nox&lt;/a&gt;代码到Emacs的 load-path 路径&lt;/li&gt;
  &lt;li&gt;把下面的配置加到 ~/.emacs 中&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'nox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dolist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;
               &lt;span class=&quot;ss&quot;&gt;'js-mode-hook&lt;/span&gt;
               &lt;span class=&quot;ss&quot;&gt;'rust-mode-hook&lt;/span&gt;
               &lt;span class=&quot;ss&quot;&gt;'python-mode-hook&lt;/span&gt;
               &lt;span class=&quot;ss&quot;&gt;'ruby-mode-hook&lt;/span&gt;
               &lt;span class=&quot;ss&quot;&gt;'java-mode-hook&lt;/span&gt;
               &lt;span class=&quot;ss&quot;&gt;'sh-mode-hook&lt;/span&gt;
               &lt;span class=&quot;ss&quot;&gt;'php-mode-hook&lt;/span&gt;
               &lt;span class=&quot;ss&quot;&gt;'c-mode-common-hook&lt;/span&gt;
               &lt;span class=&quot;ss&quot;&gt;'c-mode-hook&lt;/span&gt;
               &lt;span class=&quot;ss&quot;&gt;'c++-mode-hook&lt;/span&gt;
               &lt;span class=&quot;ss&quot;&gt;'haskell-mode-hook&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nox-ensure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;安装配置好以后，打开源码文件，即可享受流畅的智能补全体验。&lt;/p&gt;

&lt;h3 id=&quot;常用命令&quot;&gt;常用命令&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;命令&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;解释&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;nox&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;启动Nox客户端&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;nox-reconnect&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;重新链接LSP服务器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;nox-shutdown&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;终止LSP服务器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;nox-show-doc&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;显示光标处符号的文档&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;nox-rename&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;项目范围内批量重命名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;nox-format&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;格式化当前文件或选中区域&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;xref-find-definitions&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;查找光标处符号定义&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;xref-find-definitions-other-window&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;在其他窗口中查找光标处符号定义&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;xref-pop-marker-stack&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;返回定义跳转前的位置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;xref-find-references&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;查找光标处符号的所有引用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;nox-event-buffer&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;切换到LSP消息文件，查看LSP协议消息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;nox-stderr-buffer&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;切换到子进程管道文件，查看通讯细节和排错信息&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;更多命令和设置选项可以查看&lt;a href=&quot;https://github.com/manateelazycat/nox&quot;&gt;Nox&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Enjoy! ;)&lt;/p&gt;</content><author><name></name></author><summary type="html">LSP Emacs，因其丰富的插件生态和高度一致的协同环境，不论敲代码还是写文章都有行云流水的感觉。 一直以来Emacs的短板都在智能语法补全上，不能像VSCode那样非常智能的补全代码。</summary></entry><entry><title type="html">Emacs Trick – 颜色重定向</title><link href="http://localhost:4000/emacs/2020/03/28/color-remap.html" rel="alternate" type="text/html" title="Emacs Trick -- 颜色重定向" /><published>2020-03-28T00:00:00+08:00</published><updated>2020-03-28T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2020/03/28/color-remap</id><content type="html" xml:base="http://localhost:4000/emacs/2020/03/28/color-remap.html">&lt;p&gt;&lt;a href=&quot;https://github.com/manateelazycat/snails&quot;&gt;Snails&lt;/a&gt; 的输入框是无背景设计，整体设计感更好一点。&lt;/p&gt;

&lt;p&gt;但是用户如果设置了 &lt;code class=&quot;highlighter-rouge&quot;&gt;hl-line&lt;/code&gt; 这个Face，会导致snails的输入框是有两种背景颜色，非常丑。&lt;/p&gt;

&lt;p&gt;最开始准备使用临时变量，在进入 snails 的时候保存一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;hl-line&lt;/code&gt; 背景颜色，进入 snails 取消 &lt;code class=&quot;highlighter-rouge&quot;&gt;hl-line&lt;/code&gt; 背景， snails 消失的时候重新恢复 &lt;code class=&quot;highlighter-rouge&quot;&gt;hl-line&lt;/code&gt; 背景。&lt;/p&gt;

&lt;p&gt;想了想，这样做太脆弱了，一旦出问题还会导致用户的 &lt;code class=&quot;highlighter-rouge&quot;&gt;hl-line&lt;/code&gt; 样式损坏。&lt;/p&gt;

&lt;p&gt;Google了一下Emacs关于 local face 的文章，发现可以像下面这种方式来临时设置某一个 face 的样式。&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;face-remap-add-relative&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'hl-line&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:background&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;face-background&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'snails-input-buffer-face&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面代码的意思是，把 &lt;code class=&quot;highlighter-rouge&quot;&gt;hl-line&lt;/code&gt; 的 background 属性重定向到 &lt;code class=&quot;highlighter-rouge&quot;&gt;snails-input-buffer-face&lt;/code&gt; 背景色，这样既可以保证snails输入框的无背景设计，实现又非常健壮，不会因为意外对用户的主题产生副作用。&lt;/p&gt;

&lt;p&gt;Emacs还是博大精深啊，学了这么多年，还有很多东西都不懂。&lt;/p&gt;</content><author><name></name></author><summary type="html">Snails 的输入框是无背景设计，整体设计感更好一点。</summary></entry><entry><title type="html">折腾emacs-rime</title><link href="http://localhost:4000/emacs/2020/03/22/emacs-rime.html" rel="alternate" type="text/html" title="折腾emacs-rime" /><published>2020-03-22T00:00:00+08:00</published><updated>2020-03-22T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2020/03/22/emacs-rime</id><content type="html" xml:base="http://localhost:4000/emacs/2020/03/22/emacs-rime.html">&lt;p&gt;半年前在&lt;a href=&quot;https://manateelazycat.github.io/emacs/2019/09/12/make-rime-works-with-linux.html&quot;&gt;在Linux版的Emacs中使用RIME输入法&lt;/a&gt;这篇文章中详细讲述了怎么在Emacs使用RIME输入法。&lt;/p&gt;

&lt;p&gt;今天讲的仍然是在Emacs配置RIME输入法，只不过主角从&lt;a href=&quot;https://github.com/tumashu/pyim&quot;&gt;pyim&lt;/a&gt;换成了&lt;a href=&quot;https://github.com/DogLooksGood/emacs-rime&quot;&gt;emacs-rime&lt;/a&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pyim是一个强大的Emacs输入法，不但整套输入法，还支持RIME作为输入法后端输入&lt;/li&gt;
  &lt;li&gt;emacs-rime是RIME输入法的Emacs UI前端，所有行为都通过RIME配置文件来配置&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;安装rime输入法&quot;&gt;安装RIME输入法&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; fcitx-rime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;配置rime输入法&quot;&gt;配置RIME输入法&lt;/h3&gt;

&lt;h4 id=&quot;默认使用简体&quot;&gt;默认使用简体&lt;/h4&gt;

&lt;p&gt;创建配置文件 ~/.config/fcitx/rime/luna_pinyin.custom.yaml，内容填上：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# luna_pinyin.custom.yaml&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;switches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;# 注意缩进&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ascii_mode&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# reset 0 的作用是当从其他输入法切换到本输入法重设为指定状态&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;中文&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;西文&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 选择输入方案后通常需要立即输入中文，故重设 ascii_mode = 0&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;full_shape&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;半角&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;全角&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 而全／半角则可沿用之前方案的用法。&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;simplification&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# 增加这一行：默认启用「繁→簡」转换。&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;漢字&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;汉字&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;修改默认后选词数量&quot;&gt;修改默认后选词数量&lt;/h4&gt;

&lt;p&gt;创建配置文件 ~/.config/fcitx/rime/default.custom.yaml，内容填上：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;menu/page_size&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;配置模糊音&quot;&gt;配置模糊音&lt;/h4&gt;

&lt;p&gt;像我这种拼音发音不标准的人，可以在 ~/.config/fcitx/rime/default.custom.yaml 配置文件中继续追加下面配置&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;speller/algebra'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;erase/^xx$/&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;# 第一行保留&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 模糊音定義&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;derive/^([zcs])h/$1/&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;# zh, ch, sh =&amp;gt; z, c, s&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;derive/^([zcs])([^h])/$1h$2/&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# z, c, s =&amp;gt; zh, ch, sh&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;derive/^n/l/&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;# n =&amp;gt; l&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;derive/^l/n/&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;# l =&amp;gt; n&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 這兩組一般是單向的&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#- derive/^r/l/                     # r =&amp;gt; l&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;derive/^ren/yin/&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;# ren =&amp;gt; yin, reng =&amp;gt; ying&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#- derive/^r/y/                     # r =&amp;gt; y&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 下面 hu &amp;lt;=&amp;gt; f 這組寫法複雜一些，分情況討論&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#- derive/^hu$/fu/                  # hu =&amp;gt; fu&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#- derive/^hong$/feng/              # hong =&amp;gt; feng&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#- derive/^hu([in])$/fe$1/          # hui =&amp;gt; fei, hun =&amp;gt; fen&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#- derive/^hu([ao])/f$1/            # hua =&amp;gt; fa, ...&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;#- derive/^fu$/hu/                  # fu =&amp;gt; hu&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#- derive/^feng$/hong/              # feng =&amp;gt; hong&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#- derive/^fe([in])$/hu$1/          # fei =&amp;gt; hui, fen =&amp;gt; hun&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#- derive/^f([ao])/hu$1/            # fa =&amp;gt; hua, ...&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 模糊音定義先於簡拼定義，方可令簡拼支持以上模糊音&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;abbrev/^([a-z]).+$/$1/&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# 簡拼（首字母）&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;abbrev/^([zcs]h).+$/$1/&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;# 簡拼（zh, ch, sh）&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 自動糾正一些常見的按鍵錯誤&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;derive/([aeiou])ng$/$1gn/&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# dagn =&amp;gt; dang&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;derive/([dtngkhrzcs])o(u|ng)$/$1o/&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# zho =&amp;gt; zhong|zhou&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;derive/ong$/on/&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;# zhonguo =&amp;gt; zhong guo&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;derive/ao$/oa/&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;# hoa =&amp;gt; hao&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;derive/([iu])a(o|ng?)$/a$1$2/&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# tain =&amp;gt; tian&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;添加搜狗词库&quot;&gt;添加搜狗词库&lt;/h4&gt;

&lt;p&gt;网上搜索文件 luna_pinyin.sogou.dict.yaml，放到目录 ~/.config/fcitx/rime 下
然后在 ~/.config/fcitx/rime/default.custom.yaml 文件中添加下面配置：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;translator/dictionary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;luna_pinyin.sogou&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重新部署即可体验词库。&lt;/p&gt;

&lt;h3 id=&quot;安装依赖&quot;&gt;安装依赖&lt;/h3&gt;

&lt;p&gt;因为&lt;a href=&quot;https://github.com/tumashu/posframe&quot;&gt;posframe&lt;/a&gt;可以让后选词显示在光标处，所以建议安装&lt;/p&gt;

&lt;h3 id=&quot;安装emacs-rime&quot;&gt;安装emacs-rime&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/DogLooksGood/emacs-rime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把 emacs-rime 目录放到 &lt;code class=&quot;highlighter-rouge&quot;&gt;load-path&lt;/code&gt; 下，增加下面配置:&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'rime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;;; Code:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rime-user-data-dir&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;~/.config/fcitx/rime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rime-posframe-properties&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:background-color&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;#333333&quot;&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;:foreground-color&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;#dcdccc&quot;&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;:font&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;WenQuanYi Micro Hei Mono-14&quot;&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;:internal-border-width&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;default-input-method&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;rime&quot;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;rime-show-candidate&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'posframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的配置分别设置emacs-rime读取RIME配置的路径、UI细节和使用posframe来显示候选词。&lt;/p&gt;

&lt;h3 id=&quot;emacs-rime的优点&quot;&gt;emacs-rime的优点&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;安装相对pyim+rime要简单不少，基本就是下载拷贝就可以了，动态库编译和加载自动解决。&lt;/li&gt;
  &lt;li&gt;只是RIME的前端，代码量比较小，有问题还可以提交个补丁；&lt;/li&gt;
  &lt;li&gt;中英文混合输入的体验很好，英文输入完成后，按回车或者空格就可以继续输入中文；&lt;/li&gt;
  &lt;li&gt;UI默认配色不错，看着很现代；&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">半年前在在Linux版的Emacs中使用RIME输入法这篇文章中详细讲述了怎么在Emacs使用RIME输入法。</summary></entry><entry><title type="html">纪念900颗星的日子</title><link href="http://localhost:4000/emacs/eaf/2020/03/21/900-stars.html" rel="alternate" type="text/html" title="纪念900颗星的日子" /><published>2020-03-21T00:00:00+08:00</published><updated>2020-03-21T00:00:00+08:00</updated><id>http://localhost:4000/emacs/eaf/2020/03/21/900-stars</id><content type="html" xml:base="http://localhost:4000/emacs/eaf/2020/03/21/900-stars.html">&lt;p&gt;630天，全球18个开发者、15个应用、1104处改动、153个社区补丁，目前为止900颗星，继续推进 Live in Emacs 计划。&lt;/p&gt;

&lt;p&gt;特别感谢MatthewZDM同学，生活在加拿大和我倒时差协作，无数个清晨，都是我起床后，你已经审核完补丁合并入主分支。&lt;/p&gt;

&lt;p&gt;喜欢开源社区这种松散有创造力的合作模式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/900-stars/900-stars.png&quot; alt=&quot;900 Stars&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">630天，全球18个开发者、15个应用、1104处改动、153个社区补丁，目前为止900颗星，继续推进 Live in Emacs 计划。</summary></entry><entry><title type="html">最佳代理实践(2020-03-17)</title><link href="http://localhost:4000/proxy/2020/03/17/best-proxy.html" rel="alternate" type="text/html" title="最佳代理实践(2020-03-17)" /><published>2020-03-17T00:00:00+08:00</published><updated>2020-03-17T00:00:00+08:00</updated><id>http://localhost:4000/proxy/2020/03/17/best-proxy</id><content type="html" xml:base="http://localhost:4000/proxy/2020/03/17/best-proxy.html">&lt;h2 id=&quot;不断变化的gfw&quot;&gt;不断变化的GFW&lt;/h2&gt;
&lt;p&gt;GFW不断在变化，而我们的代理策略也要一直更新，今天把自己的代理设置全部集成写一遍，方便自己和看我博客的同学参考。&lt;/p&gt;

&lt;h2 id=&quot;配置trojan代理客户端&quot;&gt;配置Trojan代理客户端&lt;/h2&gt;

&lt;h3 id=&quot;准备工作&quot;&gt;准备工作&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;一台境外的VPS, 不需要购买域名和配置证书&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vps安装debian-9&quot;&gt;VPS安装Debian 9&lt;/h3&gt;

&lt;p&gt;一般VPS都有操作系统安装服务，安装Debian 9以后，替换 /etc/apt/sources.list 文件内容为163镜像源，提升软件安装速度:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deb http://mirrors.163.com/debian/ stretch main non-free contrib
deb http://mirrors.163.com/debian/ stretch-updates main non-free contrib
deb http://mirrors.163.com/debian/ stretch-backports main non-free contrib
deb-src http://mirrors.163.com/debian/ stretch main non-free contrib
deb-src http://mirrors.163.com/debian/ stretch-updates main non-free contrib
deb-src http://mirrors.163.com/debian/ stretch-backports main non-free contrib
deb http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib
deb-src http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装trojan服务端&quot;&gt;安装Trojan服务端&lt;/h3&gt;

&lt;p&gt;通过命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh root@your_vps_ip&lt;/code&gt; 登录VPS服务器后，执行下面脚本自动安装和配置Trojan服务端:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-check-certificate&lt;/span&gt; https://raw.githubusercontent.com/mark-hans/trojan-wiz/master/ins.sh &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x ins.sh &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bash ins.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装过程中提示“请选择证书模式”，选择”使用IP自签发证书”的模式。&lt;/p&gt;

&lt;h3 id=&quot;启动trojan服务端&quot;&gt;启动Trojan服务端&lt;/h3&gt;

&lt;p&gt;安装完成后，使用命令&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl start trojan-gfw&lt;/code&gt; 启动trojan服务端, 同时可以用命令&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl status trojan-gfw&lt;/code&gt;来检查trojan服务端的状态，如果状态为&lt;code class=&quot;highlighter-rouge&quot;&gt;active(running)&lt;/code&gt;, 证明trojan服务端已经启动。&lt;/p&gt;

&lt;h3 id=&quot;拷贝服务端配置文件&quot;&gt;拷贝服务端配置文件&lt;/h3&gt;

&lt;p&gt;trojan服务端配置成功以后会在VPS的/home/trojan/目录下生成client.json和ca-cert.pem两个文件:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;client.json 是客户端配置文件，已经按照VPS IP配置好&lt;/li&gt;
  &lt;li&gt;ca-cert.pem 是证书文件，已经按照VPS配置好&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如你的VPS IP为 xxx.xxx.xxx.xxx，使用下面的命令来完成拷贝服务端配置文件到本机：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scp root@xxx.xxx.xxx.xxx:/home/trojan/ca-cert.pem ./&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scp root@xxx.xxx.xxx.xxx:/home/trojan/client.json ./&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;下载trojan客户端&quot;&gt;下载Trojan客户端&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;首先在VPS使用命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;ping github.com&lt;/code&gt;, 获取 github.com 的ip地址, 比如是 192.30.253.112&lt;/li&gt;
  &lt;li&gt;在本机 /etc/hosts 文件中加入 &lt;code class=&quot;highlighter-rouge&quot;&gt;192.30.253.112 github.com&lt;/code&gt; , 这样访问github页面就暂时不需要FQ&lt;/li&gt;
  &lt;li&gt;重启本机网络服务: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo systemctl restart NetworkManager&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;下载Trojan客户端: &lt;code class=&quot;highlighter-rouge&quot;&gt;wget https://github.com/trojan-gfw/trojan/releases/download/v1.14.1/trojan-1.14.1-linux-amd64.tar.xz&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下载trojan-1.14.1-linux-amd64.tar.xz后，解压文件，把ca-cert.pem和client.json拷贝到 trojan 目录下。&lt;/p&gt;

&lt;h3 id=&quot;启动trojan客户端&quot;&gt;启动Trojan客户端&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./trojan -c client.json&lt;/code&gt; 即可在 127.0.0.1:1080 建立本地代理连接，最后通过Chrome SwitchyOmega来配置浏览器的代理设置。&lt;/p&gt;

&lt;p&gt;在浏览器验证可以FQ以后，你可以清除刚刚在本机 /etc/hosts 的github设置。&lt;/p&gt;

&lt;h2 id=&quot;配置git代理&quot;&gt;配置Git代理&lt;/h2&gt;

&lt;h3 id=&quot;配置git-httphttps代理&quot;&gt;配置Git HTTP/HTTPS代理&lt;/h3&gt;

&lt;p&gt;在 ~/.gitconfig 文件中加入以下配置:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;http]
	proxy &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; socks5://127.0.0.1:1080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意，上明配置等同于命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global http.proxy 'socks5://127.0.0.1:1080'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Git不认https.proxy，设置http.proxy就可以支持 https 了。&lt;/p&gt;

&lt;h3 id=&quot;配置git-ssh代理&quot;&gt;配置Git SSH代理&lt;/h3&gt;

&lt;p&gt;在 ~/.ssh/config 文件中加入以下配置:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host github.com
HostName github.com
User git
Port 22
ProxyCommand /usr/bin/ncat &lt;span class=&quot;nt&quot;&gt;--proxy&lt;/span&gt; 127.0.0.1:1080 &lt;span class=&quot;nt&quot;&gt;--proxy-type&lt;/span&gt; socks5 %h %p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;配置yay代理&quot;&gt;配置yay代理&lt;/h2&gt;

&lt;p&gt;yay 代理有两种方式，一种是设置代理环境变量，一种是通过安装 gcc-go 替换 go 来支持 &lt;code class=&quot;highlighter-rouge&quot;&gt;proxychains4 yay&lt;/code&gt; 的代理操作。
因为 gccgo 很多实现和 go 都有很大的差别，为了不影响其他 go 程序，选择第一种方式。&lt;/p&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt; 文件中添加如下的代理配置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;export http_proxy=socks5://127.0.0.1:1080
export https_proxy=socks5://127.0.0.1:1080
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;配置aria2代理&quot;&gt;配置Aria2代理&lt;/h2&gt;
&lt;p&gt;我们上面已经配置了Socks5代理，但是Aria2只支持HTTP代理, 所以我们需要通过 privoxy 来转换Socks5代理成HTTP代理:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; privoxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后设置 /etc/privoxy/config 配置文件，比如添加下面代码到配置文件中，把在1080端口的Socks5代理转换成9888端口的HTTP代理:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;forward-socks5t / 127.0.0.1:1080 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
listen-address 127.0.0.1:9888
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样aria2就可以直接用 &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1:9888&lt;/code&gt; 这个Http代理来下载东西了。&lt;/p&gt;

&lt;h2 id=&quot;配置npm代理&quot;&gt;配置npm代理&lt;/h2&gt;

&lt;p&gt;上面配置好 HTTP 代理，可以通过下面的命令来加速npm的下载速度：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm config &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://127.0.0.1:9888
npm config &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://registry.npmjs.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;配置youtube-dl代理&quot;&gt;配置youtube-dl代理&lt;/h2&gt;

&lt;p&gt;youtube-dl 这个工具非常方便下载一些YouTube视频，可以使用下面的命令来通过代理下载视频：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;youtube-dl &lt;span class=&quot;nt&quot;&gt;--proxy&lt;/span&gt; socks5://127.0.0.1:1080 video_url &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /download_dir/%&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;title&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;s-%&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;s.%&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ext&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;上面就是系统中大部分工具所需的代理设置，也是到目前为止我探索的代理最佳实践，我会定期保持更新的。&lt;/p&gt;</content><author><name></name></author><summary type="html">不断变化的GFW GFW不断在变化，而我们的代理策略也要一直更新，今天把自己的代理设置全部集成写一遍，方便自己和看我博客的同学参考。</summary></entry></feed>