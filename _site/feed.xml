<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-03-17T10:56:24+08:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">登入终端后自动切换目录</title><link href="http://localhost:4000/linux/2020/03/15/change-dir-after-login-shell.html" rel="alternate" type="text/html" title="登入终端后自动切换目录" /><published>2020-03-15T00:00:00+08:00</published><updated>2020-03-15T00:00:00+08:00</updated><id>http://localhost:4000/linux/2020/03/15/change-dir-after-login-shell</id><content type="html" xml:base="http://localhost:4000/linux/2020/03/15/change-dir-after-login-shell.html">&lt;p&gt;如果我们用VTE这种专业的终端控件，可以直接利用VTE的API进行SHELL登录后切换到制定的工作目录：&lt;/p&gt;

&lt;div class=&quot;language-vala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;spawn_sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pty_flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;spawn_flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* child setup */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child_pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* cancellable */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是像Wetty这种没有对外API的库，怎么让Shell登录后直接切换到制定的目录呢？&lt;/p&gt;

&lt;p&gt;研究了一下，答案非常简单，直接把下面的命令传递给Wetty的 –command 参数即可：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;bash &lt;span class=&quot;nt&quot;&gt;--login&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的命令是在登录Shell之前就切换了目录，这样Shell打开的时候会自动切换到当前的目录。&lt;/p&gt;</content><author><name></name></author><summary type="html">如果我们用VTE这种专业的终端控件，可以直接利用VTE的API进行SHELL登录后切换到制定的工作目录：</summary></entry><entry><title type="html">创作、开源和经济发展</title><link href="http://localhost:4000/opensource/2020/03/15/creation-and-surroundings.html" rel="alternate" type="text/html" title="创作、开源和经济发展" /><published>2020-03-15T00:00:00+08:00</published><updated>2020-03-15T00:00:00+08:00</updated><id>http://localhost:4000/opensource/2020/03/15/creation-and-surroundings</id><content type="html" xml:base="http://localhost:4000/opensource/2020/03/15/creation-and-surroundings.html">&lt;p&gt;早上解决了&lt;a href=&quot;https://manateelazycat.github.io/linux/2020/03/15/change-dir-after-login-shell.html&quot;&gt;登入终端后自动切换目录&lt;/a&gt;这个问题。&lt;/p&gt;

&lt;p&gt;根据这么多年的研发经验，解决这个问题过程中的灵光一闪的情况时常发生，现在回头看，其实很多复杂的技术问题总是遵循这样的规律：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;这个问题太难了，看着就复杂, 第一把搞不定&lt;/li&gt;
  &lt;li&gt;我就不信了，持续死瞌很久，第N把还是搞不定&lt;/li&gt;
  &lt;li&gt;放弃了，不搞了，不搞了&lt;/li&gt;
  &lt;li&gt;去学习其他知识，潜意识保持关注&lt;/li&gt;
  &lt;li&gt;在某一个安静的清晨，天微微亮，小鸟婉转悠扬的鸣啼声下，进入放松和专注的心流状态&lt;/li&gt;
  &lt;li&gt;突然，灵光一闪，哦，原来这么简单，搞定了&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其实，问题变化了吗？没有。&lt;/p&gt;

&lt;p&gt;那什么发生变化了呢？
是知识积累和心境发生了变化，当时你解决不了问题的关键是解决方案需要多个知识模块产生连接才能解决，你当时的知识体系是不完善的，在缺少对某块知识的掌握下，无法对多个知识模块产生连接，从而创造出解决问题的方案。&lt;/p&gt;

&lt;p&gt;所以，短暂的放下很重要，放下并不代表不解决问题，而是放下问题去做知识积累，潜意识关注的目的是让大脑在休息的时候帮你整理知识和建立知识之间的连接，大脑这个工具很神奇，只要你保持关注，它会自动在后台思考运转，不需要增加你的思考负担。&lt;/p&gt;

&lt;p&gt;所有的创造工作，特别是脑力创造领域，都需要极度的放松，因为只有极度的放松，大脑才会进入毫无杂念的专注心流。&lt;/p&gt;

&lt;p&gt;最后创作成果其实等价于这个公式：&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;创作成果 = 知识积累 + 潜意识关注 ＋ 放松的环境 ＋ 专注的心流。&lt;/p&gt;

&lt;p&gt;这种规律和模式也能解释为什么开源社区的先进技术大多数都是国外开发者创造的？&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;基本物质条件好：不为基本生存担忧，研发环境就相对宽松&lt;/li&gt;
  &lt;li&gt;长时间专注一件事情：长时间专注的心流，大脑会进行广泛的知识积累和低成本的知识整理过程&lt;/li&gt;
  &lt;li&gt;放松的心态：在宽松的环境和专注的思考下，就相对容易进入放松的状态，为多个知识模块产生连接准备创作机会&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;大多数开源项目并不是超多核心技术堆叠的，大多数开源项目都遵循下面的模式：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;项目创作阶段：通过多维度知识连接攻克了核心技术&lt;/li&gt;
  &lt;li&gt;现实对接阶段：根据项目的应用场景，不断增加工程化代码满足现实，这部分代码数量巨大，但是难度并不高，只是增加了代码的复杂度&lt;/li&gt;
  &lt;li&gt;成熟发展阶段：通过现实的总结，最后从单独功能衍生出围绕核心功能的API、SDK和生态&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;从我对国内开源环境的了解，我们在应用场景响应和生态建设能力并不差，差就差在创作阶段，究其本源，还是我们国家的经济发展水平不够高，大多数研发人才都在生存线上挣扎，因为神经时刻都在对危机做应急响应，我们无法给自己准备好创作所需的宽松环境和放松心态，导致在核心技术的多维度知识连接方面缺乏深度思考，最后也很难利用多维度的知识连接创作出解决问题的核心技术。&lt;/p&gt;

&lt;p&gt;我们现在已经在某些领域创造出开源核心技术，但是创作的数量依然不如国外，本质原因还是国家的经济水平和研发环境还需要进一步发展。&lt;/p&gt;

&lt;p&gt;做了开源十多年，年轻的时候想不清楚的问题现在想清楚了：&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;开源技术和生态的发展和国家的经济发展水平息息相关，经济好了，人就懒散了，人放松了，创作能力自然就提高了。&lt;/p&gt;</content><author><name></name></author><summary type="html">早上解决了登入终端后自动切换目录这个问题。</summary></entry><entry><title type="html">使用Markdown来自动生成流程图</title><link href="http://localhost:4000/emacs/eaf/2020/03/14/eaf-mermaid.html" rel="alternate" type="text/html" title="使用Markdown来自动生成流程图" /><published>2020-03-14T00:00:00+08:00</published><updated>2020-03-14T00:00:00+08:00</updated><id>http://localhost:4000/emacs/eaf/2020/03/14/eaf-mermaid</id><content type="html" xml:base="http://localhost:4000/emacs/eaf/2020/03/14/eaf-mermaid.html">&lt;h3 id=&quot;发现新大陆&quot;&gt;发现新大陆&lt;/h3&gt;
&lt;p&gt;在Emacs-China论坛闲逛时发现了 mermaid.js 这个图形库，这个图形库的最大优势是，你可以直接编写 markdown 文本，他会自动生成流程图、饼状图、干特图、类型图、序列图等逻辑图形。&lt;/p&gt;

&lt;p&gt;今天花了1个多小时写了个新的&lt;a href=&quot;https://github.com/manateelazycat/emacs-application-framework/commit/ca52b4b383385a89ea070f1729899404d4a10003&quot;&gt;补丁&lt;/a&gt;把Mermaid.js集成到EAF框架中。&lt;/p&gt;

&lt;p&gt;通过这个补丁，Emacs可以直接编辑Markdown文档，EAF做实时同步渲染，特别是制作技术文章配图的时候，直接修改文本的效率是鼠标拖拽图形的10倍以上，再也不会遇到以前复杂图形改动时越理越乱的问题了。&lt;/p&gt;

&lt;h3 id=&quot;安装使用&quot;&gt;安装使用&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;更新到最新版EAF&lt;/li&gt;
  &lt;li&gt;通过pip3或者pacman安装pyinotify、markdown这两个Python库&lt;/li&gt;
  &lt;li&gt;新建扩展名为 mmd 的文件&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然后参照 &lt;a href=&quot;https://mermaidjs.github.io/#/&quot;&gt;Mermaid文档&lt;/a&gt; 来创建你自己的逻辑图吧！&lt;/p&gt;

&lt;p&gt;EAF会自动处理刷新的问题，当你在左边修改逻辑图文本内容时，EAF会自动在右边刷新文本对应的逻辑图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/eaf-mermaid/eaf-mermaid.gif&quot; alt=&quot;EAF Mermaid&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;实验&quot;&gt;实验&lt;/h3&gt;
&lt;p&gt;只需要短短的几行文本就可以自动生成EAF Mermaid插件的流程图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/eaf-mermaid/eaf-mermaid.png&quot; alt=&quot;EAF Mermaid&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;
```mermaid
graph TD
    A(Emacs) --&amp;gt;|传递Markdown文件路径| B
    B(EAF Pyton端) --&amp;gt; |inotify监听Markdown文件更新| C
    C(Markdown格式转换器) --&amp;gt; |转换Markdown文本为Html格式| D
    D(PyQt WebEngine) --&amp;gt; |调用Mermaid.js| E
    E(渲染Markdown对应的逻辑图) --&amp;gt; |下一次循环| B
    style C fill:gold,stroke:#BB0
    linkStyle default stroke:#333, fill:none
```
&lt;/pre&gt;

&lt;p&gt;通过这种方式，我们只需要关心逻辑图的内容和相互关系就可以了，不用关心逻辑图的布局问题，mermaid.js会自动搞定，节省了大量鼠标拖拽图形的时间。&lt;/p&gt;

&lt;p&gt;现在EAF可以直接制作思维导图和流程图，真的太方便了，哈哈哈哈。&lt;/p&gt;</content><author><name></name></author><summary type="html">发现新大陆 在Emacs-China论坛闲逛时发现了 mermaid.js 这个图形库，这个图形库的最大优势是，你可以直接编写 markdown 文本，他会自动生成流程图、饼状图、干特图、类型图、序列图等逻辑图形。</summary></entry><entry><title type="html">读《成果管理》</title><link href="http://localhost:4000/reading/2020/03/04/reading-rbm.html" rel="alternate" type="text/html" title="读《成果管理》" /><published>2020-03-04T00:00:00+08:00</published><updated>2020-03-04T00:00:00+08:00</updated><id>http://localhost:4000/reading/2020/03/04/reading-rbm</id><content type="html" xml:base="http://localhost:4000/reading/2020/03/04/reading-rbm.html">&lt;p&gt;因为武汉疫情的原因，被封闭在老家，难得很长的空闲时间，每天除了完成工作外，主要就是在读《成果管理》这本书。
这本书主要讲的是企业的战略，原来对企业战略的认识很模糊，看完以后，战略两个字在我眼里栩栩如生：&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;战略本质就是基于创始人对自己本身和市场理解的前提下，面向客户的需求，进行资源和成本管理的一系列系统的方法和原则。&lt;/p&gt;

&lt;p&gt;书中的很多观点对于创始人思考企业的战略还是非常有指导性的，而不仅仅只是一个流行的口头禅，以下是我读完书的一些思考：&lt;/p&gt;

&lt;h3 id=&quot;关于成本&quot;&gt;关于成本&lt;/h3&gt;

&lt;p&gt;从经济的角度看，我们企业包括创始人和团队在内的所有人都是成本，而不是我们潜意识认为的我们自己是创造产品，企业的成本和大多数事务没有太多关系，特别是软件开发团队，主要的成本就是人力成本，而且和时间有关，而不是和产量和产品数量有关。&lt;/p&gt;

&lt;p&gt;关于节省成本，其实很多企业都在小成本上斤斤计较，而且为了小成本的节省，往往以牺牲人的生产力为前提的，企业最大的成本浪费在于，没有把人才资源投入到真正的商业机会中，而是根据团队规模进行雨露均沾的资源投入，最后所有的资源在团队堡垒争夺下，自动分配给很多碌碌无为的活动，而不是创造价值的机会中。&lt;/p&gt;

&lt;h3 id=&quot;关于资源&quot;&gt;关于资源&lt;/h3&gt;

&lt;p&gt;特别是研发背景的创业团队容易犯的错误是，认为只要开发出能够解决问题或者提供高效率的工具就是好的产品。但是企业真正要做的是先了解客户，经济成果获取靠的是挖掘新的商业机会，而不是靠解决问题。最好的企业运营方式应该是把资源投入到商业机会上，并远离问题。这里说的并不是不解决问题，而是解决的是客户认可的问题，而不是你自己认为的问题。高质量的产品不是技术上最精巧的东西，而是在满足客户核心痛点下成本尽量低同时稳定的产品。&lt;/p&gt;

&lt;h3 id=&quot;关于客户&quot;&gt;关于客户&lt;/h3&gt;

&lt;p&gt;创新是把已经存在的因素转化成为一个更有效的有机体，创新点越小越好。创新的点只要有一个核心点能够满足市场需求即可，其他80%的功能都不是用户所会关心的。客户购买的往往不是企业卖给他们的产品，他们不会为了产品掏腰包，他们买的是产品销售过程中，由产品技术和服务带来的满足感。&lt;/p&gt;

&lt;p&gt;这两个点我理解的特别深刻，现在世界最差的其实不是信息和知识，高水平的客户也会自己去学习，客户真正需要的是你对他的重视，彻底的研究他们的痛点，通过沟通交流在解决他们问题的前提下形成更为广泛的商业信任。只有你和客户之间形成了类似朋友之间的商务信任以后，企业开展的商务，销售，研发和服务才会有效果，才是面向机会的经济行为。&lt;/p&gt;

&lt;h3 id=&quot;关于管理&quot;&gt;关于管理&lt;/h3&gt;

&lt;p&gt;多思考客户要求背后的痛点现状，重视机会的最大化，而不是风险的最小化，如果一味追求最小的风险，最后企业面临的却是无所作为带来的最大风险。管理者第一责任是让外行人了解企业所做的，可以做的和应当做的事情。&lt;/p&gt;

&lt;h3 id=&quot;最后&quot;&gt;最后&lt;/h3&gt;
&lt;p&gt;这本书信息量非常大，作者还经常在理论下附带很多现实例子的讲解，让我深刻的理解了企业的战略并不是一句虚无缥缈的概念，而是围绕着机会和资源，随着市场不断调整的科学思考方法体系。&lt;/p&gt;</content><author><name></name></author><summary type="html">因为武汉疫情的原因，被封闭在老家，难得很长的空闲时间，每天除了完成工作外，主要就是在读《成果管理》这本书。 这本书主要讲的是企业的战略，原来对企业战略的认识很模糊，看完以后，战略两个字在我眼里栩栩如生：</summary></entry><entry><title type="html">QWebEngine进程生命周期研究</title><link href="http://localhost:4000/linux/eaf/2020/03/01/webengine-debug.html" rel="alternate" type="text/html" title="QWebEngine进程生命周期研究" /><published>2020-03-01T00:00:00+08:00</published><updated>2020-03-01T00:00:00+08:00</updated><id>http://localhost:4000/linux/eaf/2020/03/01/webengine-debug</id><content type="html" xml:base="http://localhost:4000/linux/eaf/2020/03/01/webengine-debug.html">&lt;p&gt;最近在写EAF浏览器功能时，发现QWebEngineView页面退出后，QtWebEngineProcess进程并没有退出，产生内存泄漏的问题。&lt;/p&gt;

&lt;p&gt;随即详细研究了一下QWebEngine的进程模型:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/webengine/webengine.png&quot; alt=&quot;WebEngine&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在讲进程模型之前，需要明白Qt WebEngine的组成结构:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;QWebEngineView就是一个Qt控件，专注于绘制网页内容;&lt;/li&gt;
  &lt;li&gt;QWebEnginePage才是真正管理核心资源的模块，包括历史、动作、设置、脚本和Cookie等功能。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;进程模型我们其实只用理解三个概念：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;QWebEngineView只是Qt的图形控件，当销毁QWebEngineView时，只是销毁控件的图形区域和内存空间，并不影响renderer进程;&lt;/li&gt;
  &lt;li&gt;每个QWebEnginePage对象对应一个renderer进程，生死与共；&lt;/li&gt;
  &lt;li&gt;浏览器启动之前, QWebEngine会为所有的renderer的进程准备两个zygote进程，用于资源初始化。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;理解上面的模型关系后，解决内存泄漏的问题就很简单了，只需在销毁QWebEngineView之前，手动的销毁QWebEnginePage对象，就可以自动退出对应的renderer进程。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer_widget&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer_widget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;web_page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deleteLater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer_widget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deleteLater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面是EAF浏览器删除页面时的参考代码。&lt;/p&gt;</content><author><name></name></author><summary type="html">最近在写EAF浏览器功能时，发现QWebEngineView页面退出后，QtWebEngineProcess进程并没有退出，产生内存泄漏的问题。</summary></entry><entry><title type="html">EAF预览Office文件</title><link href="http://localhost:4000/emacs/eaf/2020/02/29/eaf-doc.html" rel="alternate" type="text/html" title="EAF预览Office文件" /><published>2020-02-29T00:00:00+08:00</published><updated>2020-02-29T00:00:00+08:00</updated><id>http://localhost:4000/emacs/eaf/2020/02/29/eaf-doc</id><content type="html" xml:base="http://localhost:4000/emacs/eaf/2020/02/29/eaf-doc.html">&lt;p&gt;偶尔我们需要阅读一下Office文档资料，只要不用编辑，我们就可以不用打开笨重的Office专业软件。&lt;/p&gt;

&lt;p&gt;今天给EAF增加了一个新的命令&lt;a href=&quot;https://github.com/manateelazycat/emacs-application-framework/commit/19f5874c7d3c61fcacce57c70d9449da3efcb3cc&quot;&gt;eaf-open-office&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当EAF打开Office文件的时候，会调用libreoffice转换Office文件为pdf格式，再用EAF的PDF阅读器打开查阅:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/eaf-doc/eaf-doc.gif&quot; alt=&quot;EAF Doc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过这个方式，可以无缝的把Office文档查阅和Emacs协作起来，还可以用Emacs的方式实时搜索Office文档内容，非常方便。;)&lt;/p&gt;</content><author><name></name></author><summary type="html">偶尔我们需要阅读一下Office文档资料，只要不用编辑，我们就可以不用打开笨重的Office专业软件。</summary></entry><entry><title type="html">EAF增加了思维导图插件</title><link href="http://localhost:4000/emacs/eaf/2020/02/28/eaf-mindmap.html" rel="alternate" type="text/html" title="EAF增加了思维导图插件" /><published>2020-02-28T00:00:00+08:00</published><updated>2020-02-28T00:00:00+08:00</updated><id>http://localhost:4000/emacs/eaf/2020/02/28/eaf-mindmap</id><content type="html" xml:base="http://localhost:4000/emacs/eaf/2020/02/28/eaf-mindmap.html">&lt;p&gt;平常写项目文档经常用到思维导图帮助梳理思路，最近下班后用EAF结合jsMind这个库自己写了一个思维导图软件:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/eaf-mindmap/eaf-mindmap.gif&quot; alt=&quot;EAF Mindmap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个思维导图插件主要的功能有：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;全键盘操作：像Vim那样支持单按键操作，能够自动识别命令模式还是编辑模
式, 操作效率超高;&lt;/li&gt;
  &lt;li&gt;支持目录导出：思维导图可以直接导出成 org-mode 文件，直接在编辑导出的目录结构，继续填充文章内容;&lt;/li&gt;
  &lt;li&gt;支持Emacs编辑：文字可以用Emacs编辑，文字编辑效率更高;&lt;/li&gt;
  &lt;li&gt;和Emacs协作：可以和Emacs的插件生态协作，不用在Emacs和思维导图之间来
回切换;&lt;/li&gt;
  &lt;li&gt;其他常用功能：像保存文件，导出图片，缩放，切换节点等功能一应俱全。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;快捷键&quot;&gt;快捷键&lt;/h4&gt;
&lt;p&gt;| 快捷键  | 命令                   |
| :—— | :——–              |
| TAB     | 添加子节点             |
| RET     | 添加兄弟节点           |
| Delete  | 删除节点               |
| d       | 删除节点               |
| D       | 删除中间节点               |
| i       | 增加中间节点               |
| f       | 更新节点内容           |
| j       | 插入或者选择下面的节点 |
| k       | 插入或者选择上面的节点 |
| h       | 插入或者选择左边的节点 |
| l       | 插入或者选择右边的节点 |
| w       | 拷贝节点内容           |
| y       | 粘贴节点内容           |
| W       | 剪切节点树             |
| Y       | 粘贴节点树             |
| t       | 隐藏子节点             |
| -       | 缩小                   |
| =       | 放大                   |
| 0       | 默认大小               |
| b       | 增加节点背景图         |
| 1       | 保存截图               |
| 2       | 保存文件               |
| 3       | 保存为org格式          |
| M-r     | 刷新页面               |&lt;/p&gt;

&lt;p&gt;终于不用付费购买专业的思维导图软件就能享受到高级功能，自己动手，丰衣足
食。&lt;/p&gt;</content><author><name></name></author><summary type="html">平常写项目文档经常用到思维导图帮助梳理思路，最近下班后用EAF结合jsMind这个库自己写了一个思维导图软件:</summary></entry><entry><title type="html">EAF浏览器 + Aria2</title><link href="http://localhost:4000/emacs/eaf/2020/02/15/eaf-aria2.html" rel="alternate" type="text/html" title="EAF浏览器 + Aria2" /><published>2020-02-15T00:00:00+08:00</published><updated>2020-02-15T00:00:00+08:00</updated><id>http://localhost:4000/emacs/eaf/2020/02/15/eaf-aria2</id><content type="html" xml:base="http://localhost:4000/emacs/eaf/2020/02/15/eaf-aria2.html">&lt;h3 id=&quot;eaf浏览器--aria2下载客户端&quot;&gt;EAF浏览器 + Aria2下载客户端&lt;/h3&gt;
&lt;p&gt;今天写了一个&lt;a href=&quot;https://github.com/manateelazycat/emacs-application-framework/commit/c026064067d9c6100fbfe9f983a0486b8aea9627&quot;&gt;EAF+Aria2&lt;/a&gt;补丁。&lt;/p&gt;

&lt;p&gt;只要安装了&lt;code class=&quot;highlighter-rouge&quot;&gt;aria2c&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;aria2p&lt;/code&gt;这两个命令，EAF浏览器就可以直接使用aria2来下载文件了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; aria2
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pip3 &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;aria2p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;并且在EAF浏览器中按 i 键，可以直接打开Aria2的网页客户端，用来管理文件的下载，暂停，删除并查看下载速度等详细信息：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/eaf-aria2/eaf-aria2.png&quot; alt=&quot;EAF + Aria2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;自定义下载目录&quot;&gt;自定义下载目录&lt;/h3&gt;
&lt;p&gt;EAF的默认下载目录在 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Downloads&lt;/code&gt;, 我们可以通过下面的代码修改下载文件保存目录，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Documents&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eaf-setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eaf-browser-download-path&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;~/Documents&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;给aria2添加下载代理&quot;&gt;给Aria2添加下载代理&lt;/h3&gt;
&lt;p&gt;在国内，代理是必备的设置。&lt;/p&gt;

&lt;p&gt;我本地有Socks5代理，但是Aria2只支持HTTP代理, 所以我们需要通过 privoxy 来转换Socks5代理成HTTP代理:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; privoxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后设置 /etc/privoxy/config 配置文件，比如添加下面代码到配置文件中，把在1080端口的Socks5代理转换成9888端口的HTTP代理:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;forward-socks5t / 127.0.0.1:1080 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
listen-address 127.0.0.1:9888
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后通过下面的代码来设置Aria2代理:&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eaf-setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eaf-browser-aria2-proxy-host&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eaf-setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eaf-browser-aria2-proxy-port&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;9888&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样Aria2所有的下载连接都会通过代理来下载文件了, happy hacking! ;)&lt;/p&gt;</content><author><name></name></author><summary type="html">EAF浏览器 + Aria2下载客户端 今天写了一个EAF+Aria2补丁。</summary></entry><entry><title type="html">修复Git远端意外挂断</title><link href="http://localhost:4000/linux/2020/02/15/git-push-hung-up.html" rel="alternate" type="text/html" title="修复Git远端意外挂断" /><published>2020-02-15T00:00:00+08:00</published><updated>2020-02-15T00:00:00+08:00</updated><id>http://localhost:4000/linux/2020/02/15/git-push-hung-up</id><content type="html" xml:base="http://localhost:4000/linux/2020/02/15/git-push-hung-up.html">&lt;p&gt;今天在执行命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; 时，终端报了下面的错误:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;枚举对象: 35, 完成.
对象计数中: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;35/35&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 完成.
使用 4 个线程进行压缩
压缩对象中: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;30/30&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 完成.
写入对象中: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;30/30&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 341.28 KiB | 976.00 KiB/s, 完成.
总共 30 （差异 10），复用 0 （差异 0）
Connection to github.com closed by remote host.
fatal: 远端意外挂断了
fatal: 远端意外挂断了
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Google了一下，应该是Buffer太小的原因，使用下面的命令修复后就可以正常 &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; 了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config http.postBuffer 100000000
git config ssh.postBuffer 100000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">今天在执行命令 git push 时，终端报了下面的错误:</summary></entry><entry><title type="html">修复Arch升级后内核启动失败的问题</title><link href="http://localhost:4000/linux/2020/02/14/fix-arch-boot-failed.html" rel="alternate" type="text/html" title="修复Arch升级后内核启动失败的问题" /><published>2020-02-14T00:00:00+08:00</published><updated>2020-02-14T00:00:00+08:00</updated><id>http://localhost:4000/linux/2020/02/14/fix-arch-boot-failed</id><content type="html" xml:base="http://localhost:4000/linux/2020/02/14/fix-arch-boot-failed.html">&lt;h3 id=&quot;问题&quot;&gt;问题&lt;/h3&gt;
&lt;p&gt;今天升级Arch系统后，启动显示 &lt;code class=&quot;highlighter-rouge&quot;&gt;error: file /boot/vmlinuz-5.3-x86_64 not found&lt;/code&gt; 的错误。&lt;/p&gt;

&lt;p&gt;每次Arch升级内核，都会因为Grub内核版本号不升级导致这种问题。&lt;/p&gt;

&lt;h3 id=&quot;修复方法&quot;&gt;修复方法&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;从Grub菜单，按C键进入命令行&lt;/li&gt;
  &lt;li&gt;输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; 命令看磁盘信息，比如显示 &lt;code class=&quot;highlighter-rouge&quot;&gt;(hd0,msdos1)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;set root=(hd0,msdos1)&lt;/code&gt; 命令设置根分区&lt;/li&gt;
  &lt;li&gt;输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;ls /boot&lt;/code&gt; 查看系统的内核文件版本号, 比如版本号5.4&lt;/li&gt;
  &lt;li&gt;重启系统后, 在Grub菜单按E键编辑Grub配置文件，把内核版本从5.3改成5.4后，按Ctrl+X快捷键启动系统&lt;/li&gt;
  &lt;li&gt;输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo sed -i 's/5.3/5.4/g' /boot/grub/grub.cfg&lt;/code&gt; 替换配置文件的内核版本号&lt;/li&gt;
  &lt;li&gt;重启系统，应该就没有问题了&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不知道为啥Arch不在内核升级后执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;grub update&lt;/code&gt; 命令自动更新grub配置文件来避免这种问题?&lt;/p&gt;</content><author><name></name></author><summary type="html">问题 今天升级Arch系统后，启动显示 error: file /boot/vmlinuz-5.3-x86_64 not found 的错误。</summary></entry></feed>