<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-12-19T22:05:06+08:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">EAF Browser支持Emacs风格的搜索啦！</title><link href="http://localhost:4000/emacs/2019/12/19/eaf-browser-support-search.html" rel="alternate" type="text/html" title="EAF Browser支持Emacs风格的搜索啦！" /><published>2019-12-19T00:00:00+08:00</published><updated>2019-12-19T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2019/12/19/eaf-browser-support-search</id><content type="html" xml:base="http://localhost:4000/emacs/2019/12/19/eaf-browser-support-search.html">&lt;p&gt;社区大神提交了一个&lt;a href=&quot;https://github.com/manateelazycat/emacs-application-framework/commit/f5526b01c90d7ac2df22d5f4d06a98f2ad4d76d9&quot;&gt;新的补丁&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/eaf-browser-support-search/eaf-browser-support-search.png&quot; alt=&quot;Search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在可以直接在EAF Browser里面按 Ctrl + s 或者 Ctrl + r 进行浏览器页面内容搜索了，所有的搜索细节都和Emacs细节保持一致：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;第一次按 Ctrl + s 或 Ctrl + r 键进入搜索模式，输入搜索关键字&lt;/li&gt;
  &lt;li&gt;第二次按 Ctrl + s 或 Ctrl + r 键的时候，继续搜索&lt;/li&gt;
  &lt;li&gt;按 Ctrl + g 取消搜索&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;社区的大神们都好厉害，每天发好多补丁，多的我有时候都看不过来了。&lt;/p&gt;</content><author><name></name></author><summary type="html">社区大神提交了一个新的补丁</summary></entry><entry><title type="html">EAF PDF Viewer, Jump link like Vimium</title><link href="http://localhost:4000/emacs/2019/12/15/eaf-pdfviewer-support-link-jump.html" rel="alternate" type="text/html" title="EAF PDF Viewer, Jump link like Vimium" /><published>2019-12-15T00:00:00+08:00</published><updated>2019-12-15T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2019/12/15/eaf-pdfviewer-support-link-jump</id><content type="html" xml:base="http://localhost:4000/emacs/2019/12/15/eaf-pdfviewer-support-link-jump.html">&lt;p&gt;最近重感冒，睡觉起来发现&lt;a href=&quot;https://github.com/luhuaei&quot;&gt;luhuaei&lt;/a&gt;给我发了一个补丁&lt;a href=&quot;https://github.com/manateelazycat/emacs-application-framework/pull/157&quot;&gt;Jump link like Vimium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个功能的用法很简单，当你在EAF PDF Viewer里面按 f 键后，EAF会自动在PDF所有可以跳转的地方，画上类似 Vimium 的按键线索：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/eaf-pdfviewer-link/eaf-pdfviewer-link.png&quot; alt=&quot;Vimium Jump&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接着输入提示按键线索后，即可通过键盘跳转到链接对应的页面，特别在阅读PDF材料翻目录的时候特别有用。&lt;/p&gt;

&lt;p&gt;这个补丁有个小小的问题，用户按 Ctrl + G 终止输入的时候不会清除页面跳转的按键线索，想了5分钟，给EAF添加了一个&lt;a href=&quot;https://github.com/manateelazycat/emacs-application-framework/commit/b8cb6cb0ffa3cd0c5770b8be5da288f0c1e7f354&quot;&gt;cancel_input_message DBus接口&lt;/a&gt;, 在用户终止输入的时候自动清除页面跳转的按键线索。&lt;/p&gt;

&lt;p&gt;现在在EAF里面阅读PDF的体验更完美了，听说 luhuaei 还在开发PDF搜索的功能，期待。&lt;/p&gt;

&lt;p&gt;感谢luhuaei! happy hacking!&lt;/p&gt;</content><author><name></name></author><summary type="html">最近重感冒，睡觉起来发现luhuaei给我发了一个补丁Jump link like Vimium</summary></entry><entry><title type="html">EAF PDF Viewer支持搜索啦！</title><link href="http://localhost:4000/emacs/2019/12/15/eaf-pdfviewer-support-search.html" rel="alternate" type="text/html" title="EAF PDF Viewer支持搜索啦！" /><published>2019-12-15T00:00:00+08:00</published><updated>2019-12-15T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2019/12/15/eaf-pdfviewer-support-search</id><content type="html" xml:base="http://localhost:4000/emacs/2019/12/15/eaf-pdfviewer-support-search.html">&lt;p&gt;&lt;a href=&quot;https://github.com/luhuaei&quot;&gt;luhuaei&lt;/a&gt;太厉害了，今天早上给EAF PDF Viewer支持了&lt;a href=&quot;https://manateelazycat.github.io/emacs/2019/12/15/eaf-pdfviewer-support-link-jump.html&quot;&gt;Vimium Jump&lt;/a&gt;后，又加了一个&lt;a href=&quot;https://github.com/manateelazycat/emacs-application-framework/commit/a8ca34e8a04c29657507fc0733a85071cf07a3c5&quot;&gt;搜索补丁&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在EAF PDF插件中，按 s 键输入需要搜索的字符，即可在PDF显示匹配的位置，再按一下 s 按键取消关键字高亮。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/eaf-pdfviewer-search/eaf-pdfviewer-search.png&quot; alt=&quot;Search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;搜索关键字后，按 n 键跳到下一个关键字的位置，按 N 键跳到最后一个关键字的位置。&lt;/p&gt;

&lt;p&gt;EAF PDF Viewer越来越好用啦！&lt;/p&gt;</content><author><name></name></author><summary type="html">luhuaei太厉害了，今天早上给EAF PDF Viewer支持了Vimium Jump后，又加了一个搜索补丁</summary></entry><entry><title type="html">EAF支持书签啦！</title><link href="http://localhost:4000/emacs/2019/12/11/eaf-support-bookmark.html" rel="alternate" type="text/html" title="EAF支持书签啦！" /><published>2019-12-11T00:00:00+08:00</published><updated>2019-12-11T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2019/12/11/eaf-support-bookmark</id><content type="html" xml:base="http://localhost:4000/emacs/2019/12/11/eaf-support-bookmark.html">&lt;p&gt;&lt;a href=&quot;https://github.com/manateelazycat/emacs-application-framework/commits?author=clemera&quot;&gt;Clemens Radermacher&lt;/a&gt; 这个德国的黑客太凶残了，两天给我发送了无数补丁。因为时区的关系，刚好我下班，他就刚刚起床，起床就疯狂的发送各种功能补丁，重构补丁等，加上这几天感冒输液，经常在医院用手机审核补丁代码，手动捂脸。&lt;/p&gt;

&lt;p&gt;今天这家伙又发送了支持标签的&lt;a href=&quot;https://github.com/manateelazycat/emacs-application-framework/pull/133&quot;&gt;补丁&lt;/a&gt;, 现在EAF直接对接Emacs强大的书签功能，包括浏览器和PDF阅读器插件，可以按照以下的方式做书签操作。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;C-x r m (bookmark-set) 记录当前EAF页面到书签，手动输入自定义书签名称&lt;/li&gt;
  &lt;li&gt;C-x r l (bookmark-bmenu-list) 列出所有书签&lt;/li&gt;
  &lt;li&gt;在Emacs书签中按回车即可一键打开EAF对应的插件，不用手动输入Google网址或者在Dired中手动找PDF文件的路径&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当然也可以用命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;eaf-open-bookmark&lt;/code&gt; 来快速搜索书签来快速打开，其实最快的方法就是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;C-x r m (bookmark-set) 记录当前EAF页面到书签，手动输入自定义书签名称&lt;/li&gt;
  &lt;li&gt;启动&lt;a href=&quot;https://github.com/manateelazycat/snails&quot;&gt;Snails&lt;/a&gt;, 直接搜索书签名字即可快速打开书签&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;现在在Emacs里面 EAF + Bookmark + Snails 组合的效率杠杠的。&lt;/p&gt;

&lt;p&gt;感谢牛逼的德国战车，补丁刷刷的，我估计明天早上起床他刚好下班，估计又一堆幸福的补丁发来。;)&lt;/p&gt;</content><author><name></name></author><summary type="html">Clemens Radermacher 这个德国的黑客太凶残了，两天给我发送了无数补丁。因为时区的关系，刚好我下班，他就刚刚起床，起床就疯狂的发送各种功能补丁，重构补丁等，加上这几天感冒输液，经常在医院用手机审核补丁代码，手动捂脸。</summary></entry><entry><title type="html">想新写一个LSP Mode!</title><link href="http://localhost:4000/emacs/2019/12/05/want-write-new-lsp-mode.html" rel="alternate" type="text/html" title="想新写一个LSP Mode!" /><published>2019-12-05T00:00:00+08:00</published><updated>2019-12-05T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2019/12/05/want-write-new-lsp-mode</id><content type="html" xml:base="http://localhost:4000/emacs/2019/12/05/want-write-new-lsp-mode.html">&lt;p&gt;今年过年好早，准备等公司放假了，想重新写一个LSP Mode, 满足以下几个目标：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;零配置，就像TabNine那样，打开文件就可以补全，自动识别Project项目和Python这种单文件，不要让用户吭哧吭哧的配置，lsp-mode那样复杂的配置好烦;&lt;/li&gt;
  &lt;li&gt;极致的速度，准备用Rust撸一个中转桥动态模块，专门用于和LSP Server进行通讯，解析LSP Server返回的协议内容，Rust中转桥只和 Emacs的Company Mode沟通，这样性能应该是足够流畅的;&lt;/li&gt;
  &lt;li&gt;专注于键盘操作，那些花哨的档眼睛的UI控件不要有，太花哨而且做的不好用，eldoc文档提示和yasnippet参数模板补全的配合可以有;&lt;/li&gt;
  &lt;li&gt;稳定，如果有一些补全高级功能没法做稳定，宁愿不要提供也不要有bug, 不稳定太烦人了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;公司最近好忙，最近肯定没时间的，可以先和大家吹吹牛讨论下，等我闲的时候写，就像半年前写Snails 的节奏，先讨论需求，需求讨论清楚好撸代码。&lt;/p&gt;

&lt;p&gt;感兴趣的Emacs Hacker欢迎一起讨论或者发邮件给我 lazycat.manatee@gmail.com&lt;/p&gt;</content><author><name></name></author><summary type="html">今年过年好早，准备等公司放假了，想重新写一个LSP Mode, 满足以下几个目标：</summary></entry><entry><title type="html">在Elisp端定制EAF选项值</title><link href="http://localhost:4000/emacs/2019/11/27/modify-eaf-variable-on-elisp-side.html" rel="alternate" type="text/html" title="在Elisp端定制EAF选项值" /><published>2019-11-27T00:00:00+08:00</published><updated>2019-11-27T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2019/11/27/modify-eaf-variable-on-elisp-side</id><content type="html" xml:base="http://localhost:4000/emacs/2019/11/27/modify-eaf-variable-on-elisp-side.html">&lt;p&gt;感谢社区大神今天发送的这个补丁&lt;a href=&quot;https://github.com/manateelazycat/emacs-application-framework/pull/86/files&quot;&gt;New API, eaf-set on the Emacs side&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;现在我们可以使用 eaf-set 这个函数在Elisp端设置EAF插件的变量了，不需要修改EAF插件的Python代码即可定制EAF插件的行为。&lt;/p&gt;

&lt;h3 id=&quot;举一个简单的例子&quot;&gt;举一个简单的例子：&lt;/h3&gt;

&lt;p&gt;在Elisp端，我们使用 eaf-set 设置了 &lt;code class=&quot;highlighter-rouge&quot;&gt;eaf-camera-save-path&lt;/code&gt; 这个变量的值&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Elisp&quot;&gt;(eaf-set 'eaf-camera-save-path &quot;~/Downloads&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;eaf-set 会自动更新 EAF Python 端 buffer 中的字典 &lt;code class=&quot;highlighter-rouge&quot;&gt;emacs_var_dict&lt;/code&gt; 对应的 key, 最终我们在 EAF Python 端可以通过下面的代码来获取刚刚我们通过 eaf-set 设置的变量 eaf-camera-save-path 的值。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;self.emacs_var_dict[&quot;eaf-camera-save-path&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样所有的变量定义都可以在 Elisp 端通过配置灵活自定义了。&lt;/p&gt;</content><author><name></name></author><summary type="html">感谢社区大神今天发送的这个补丁New API, eaf-set on the Emacs side</summary></entry><entry><title type="html">不要说自己是玩电脑的</title><link href="http://localhost:4000/linux/2019/11/25/breaking-captcha.html" rel="alternate" type="text/html" title="不要说自己是玩电脑的" /><published>2019-11-25T00:00:00+08:00</published><updated>2019-11-25T00:00:00+08:00</updated><id>http://localhost:4000/linux/2019/11/25/breaking-captcha</id><content type="html" xml:base="http://localhost:4000/linux/2019/11/25/breaking-captcha.html">&lt;p&gt;不要告诉别人自己是玩电脑的，特别是亲朋好友，他们会认为你啥都会干，特别是…&lt;/p&gt;

&lt;p&gt;周末被亲戚拉去写爬虫，苦逼啊，看了一下二维码的页面，大多数填表的工作都可以由 Selenium 来完成，唯一麻烦一点的就是验证码。&lt;/p&gt;

&lt;p&gt;验证码看了一下，就是比较简单的英文和数字混合变形, 没有辅助干扰线，没有复杂背景和鼠标移动探测，应该不难。&lt;/p&gt;

&lt;p&gt;一般来说，这种静态的验证码破解的思路如下：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;黑白化，去掉背景纹理干扰&lt;/li&gt;
  &lt;li&gt;去掉孤立噪点，避免干扰线干扰&lt;/li&gt;
  &lt;li&gt;锐化处理，让字体边缘更为清晰&lt;/li&gt;
  &lt;li&gt;字母截取，得出独立的字符, 一般可以用图片发大5倍绝技，增加OCR识别成功率&lt;/li&gt;
  &lt;li&gt;把很多样本截取的不同字符丢给机器学习,让机器去学习不同字符的变形情况&lt;/li&gt;
  &lt;li&gt;最后全部连在一起，做验证码内容识别&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;玩了一会机器学习代码，和我当年写的网易有道词典Linux版的OCR识别大部分流程差不多，就是机器学习这一块比较唬人。&lt;/p&gt;

&lt;p&gt;一般我到这个时候就会开始偷懒，这么成熟的产业，一定有公司干验证码破解服务的公司吧？&lt;/p&gt;

&lt;p&gt;网上搜索对比了一下，https://anti-captcha.com 这家公司的服务就不错，已经在后台搭建机器学习的服务，而且支持支付宝, 能用钱解决的问题就不要浪费时间，哈哈哈哈。&lt;/p&gt;

&lt;p&gt;测试了一下，成功率蛮高，99%:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/breaking-captcha/breaking-captcha.png&quot; alt=&quot;Breaking Captcha&quot; /&gt;&lt;/p&gt;

&lt;p&gt;整体思路如下：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;用 selenium 调用 Chromium 加载网页&lt;/li&gt;
  &lt;li&gt;通过 driver.get_screenshot_as_png() 获取网页截图&lt;/li&gt;
  &lt;li&gt;通过 Selenium XPath 定位验证码的元素，然后通过坐标，从网页截图中切割验证码的图片&lt;/li&gt;
  &lt;li&gt;转换 PIL Image 对象为 Byte Array 格式的数据，丢给 CaptchaSolver 这个库&lt;/li&gt;
  &lt;li&gt;填上 anti-captcha 的API Key, 等5秒钟就会返回破解的验证码了&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;为什么不用 request 请求 img 元素 src 属性呢？&lt;/p&gt;

&lt;p&gt;因为当你重新请求的时候，验证码会再次生成，所以要用截图的方式取本次的验证码图片。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PIL&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BytesIO&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;captcha_solver&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CaptchaSolver&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 通过Chromium加载网页
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://www.xxx.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 获得网页截图
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_screenshot_as_png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;im&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BytesIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 找到验证码所在的元素，先阅读 Selenium API文档，下面这行代码需要换成实际的验证码元素
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_class_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;validimg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 获取验证码的位置信息
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'y'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'width'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'y'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'height'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 通过验证码坐标偏移，截取验证码的截图
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;im&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 转换图片为Byte Array格式的数据
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BytesIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'PNG'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;byte_im&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 通过 anti-captcha 的API key进行验证码破解工作
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CaptchaSolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'antigate'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'your-anti-captcha-api-key'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;captcha_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve_captcha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte_im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 打印验证码
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;captcha_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;给一段参考的实例代码，最后我不是玩电脑的，只是一个写代码的，哈哈哈哈。&lt;/p&gt;</content><author><name></name></author><summary type="html">不要告诉别人自己是玩电脑的，特别是亲朋好友，他们会认为你啥都会干，特别是…</summary></entry><entry><title type="html">为EAF PDF阅读器增加夜晚模式</title><link href="http://localhost:4000/emacs/2019/11/23/eaf-pdf-support-inverted-mode.html" rel="alternate" type="text/html" title="为EAF PDF阅读器增加夜晚模式" /><published>2019-11-23T00:00:00+08:00</published><updated>2019-11-23T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2019/11/23/eaf-pdf-support-inverted-mode</id><content type="html" xml:base="http://localhost:4000/emacs/2019/11/23/eaf-pdf-support-inverted-mode.html">&lt;p&gt;最近晚上才有空看会儿书，EAF PDF阅读器默认是渲染PDF文件的原色，一般的PDF文件背景都是白色的，就像这样。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/eaf-pdf-support-inverted-mode/eaf_light_mode.png&quot; alt=&quot;Light Mode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;晚上看的时间久了眼睛就会很累，一直想添加一个模式切换的功能，晚上可以用夜晚模式来读书，就像下面这样。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/eaf-pdf-support-inverted-mode/eaf_dark_mode.png&quot; alt=&quot;Dark Mode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最开始的时候读了 PyMupdf 的手册，找到API&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getPixmap(matrix=fitz.Identity, colorspace=fitz.csRGB, clip=None, alpha=False, annots=True)&lt;/code&gt; ,&lt;/p&gt;

&lt;p&gt;最开始的想法是直接把 alpha 这个参数设置为 True, 然后PDF页面渲染的时候先画任意颜色背景，因为PDF页面是透明的，这样就可以通过背景颜色渲染来控制PDF的背景颜色。&lt;/p&gt;

&lt;p&gt;理想很丰满，因为页面缩放的原因，page.getPixmap 的缩放矩阵参数 matrix 结合 alpha 参数，就会导致PDF页面图片透明的时候，同时影响到文字的渲染和变形，最终导致 alpha 参数为 True 的时候，页面渲染文字模糊扭曲。&lt;/p&gt;

&lt;p&gt;第一次尝试以失败告终，看来这条路不行，因为即使解决了文字扭曲的问题，上面的方法只是不绘制背景，如果黑色的背景叠加黑色的文字什么就看不到了，如果PDF文件里有其他颜色的文字，这样背景和文字的对比处理就更复杂了。&lt;/p&gt;

&lt;p&gt;想不通问题的时候就先把问题放一放，遛完狗回来，漫无目的的看着一些技术文章，看着看着突然想到了PDF 阅读器的本质就是获取PDF页面信息，通过缩放和位置控制来绘制图片，图片的对象就是pixmap, 既然PyMupdf的Page API无法处理这种情况，为什么不从 pixmap 着手？&lt;/p&gt;

&lt;p&gt;马上搜索了一下 pixmap 的API, 看到了这个：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;invertIRect([irect])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;看着原理可以行得通，构思一下解决思路：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;获取 PDF 的图像数据: pixmap = page.getPixmap(matrix=trans, alpha=False)&lt;/li&gt;
  &lt;li&gt;反色模式的时候执行：pixmap.invertIRect(pixmap.irect)&lt;/li&gt;
  &lt;li&gt;最终转换成图片进行渲染：img = QImage(pixmap.samples, pixmap.width, pixmap.height, pixmap.stride, QImage.Format_RGB888)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;花了5分钟调整代码，搞定！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/manateelazycat/emacs-application-framework/commit/318718bf80f128ba38a678f22a11e2194816245c&quot;&gt;补丁&lt;/a&gt;中增加了一些辅助代码，使得EAF可以记住每个PDF文件的反色模式，下次就不用再手动切换模式了, 舒服。&lt;/p&gt;

&lt;p&gt;BTW, 最近我自己的公司在招聘Linux编程高手，如果你像我这样热爱编程，喜欢研究开源软件，欢迎联系我: lazycat.manatee@gmail.com&lt;/p&gt;</content><author><name></name></author><summary type="html">最近晚上才有空看会儿书，EAF PDF阅读器默认是渲染PDF文件的原色，一般的PDF文件背景都是白色的，就像这样。</summary></entry><entry><title type="html">修复微信Bad Window的问题</title><link href="http://localhost:4000/linux/2019/11/15/fix-bad-window.html" rel="alternate" type="text/html" title="修复微信Bad Window的问题" /><published>2019-11-15T00:00:00+08:00</published><updated>2019-11-15T00:00:00+08:00</updated><id>http://localhost:4000/linux/2019/11/15/fix-bad-window</id><content type="html" xml:base="http://localhost:4000/linux/2019/11/15/fix-bad-window.html">&lt;h3 id=&quot;问题&quot;&gt;问题&lt;/h3&gt;
&lt;p&gt;Arch下 deepin-wine-wechat 这个包不是用的 deepin-wine, 而是 wine 构建的，导致有两个问题，第一个透明窗口不消失，第二个是无法输入中文，原因是 DeepinWine 的一些补丁没有推送到上游 Wine 社区。&lt;/p&gt;

&lt;p&gt;DeepinWine 版本的微信需要安装 deepin.com.wechat2 这个包，但是这个版本的微信启动会显示 X BadWindow 的错误。
原因是当时 DeepinWine 编写代码时只允许在 DDE 或者 Gnome 环境下运行。&lt;/p&gt;

&lt;h3 id=&quot;解决思路&quot;&gt;解决思路&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;安装依赖 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo pacman -S gnome-settings-daemon&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/deepinwine/apps/Deepin-WeChat/run.sh&lt;/code&gt; 在开头插入一行 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/gsd-xsettings &amp;amp;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;删除原先的微信目录 &lt;code class=&quot;highlighter-rouge&quot;&gt;rm -rf ~/.deepinwine/Deepin-WeChat&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样 DeepinWine 就认为在Gnome环境下，可以正常启动 DeepinWine 版本的微信了。&lt;/p&gt;

&lt;p&gt;同时，可以用命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;wmctrl -x -a wechat.exe || /opt/deepinwine/apps/Deepin-WeChat/run.sh&lt;/code&gt; 绑定快捷键进行一键启动微信或者切换微信窗口。&lt;/p&gt;</content><author><name></name></author><summary type="html">问题 Arch下 deepin-wine-wechat 这个包不是用的 deepin-wine, 而是 wine 构建的，导致有两个问题，第一个透明窗口不消失，第二个是无法输入中文，原因是 DeepinWine 的一些补丁没有推送到上游 Wine 社区。</summary></entry><entry><title type="html">重新起航</title><link href="http://localhost:4000/life/2019/10/31/sailing.html" rel="alternate" type="text/html" title="重新起航" /><published>2019-10-31T00:00:00+08:00</published><updated>2019-10-31T00:00:00+08:00</updated><id>http://localhost:4000/life/2019/10/31/sailing</id><content type="html" xml:base="http://localhost:4000/life/2019/10/31/sailing.html">&lt;p&gt;自己最近成立了一家新公司，主要做Linux的应用和整体解决方案（不做操作系统）。&lt;/p&gt;

&lt;p&gt;最近在招熟悉Linux、Gtk/Qt、Xorg的编程高手，只要自学能力强, 不要求一定要有多少工作经验，来公司可以有大牛手把手传授你十多年编程武艺。&lt;/p&gt;

&lt;p&gt;要求：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;热爱Linux，自学能力强&lt;/li&gt;
  &lt;li&gt;熟悉Gtk或者Qt, 熟悉Xorg或者OpenGL更佳&lt;/li&gt;
  &lt;li&gt;能够来武汉工作&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;感谢过去一年多关心和帮助过我的朋友们， 特别谢谢你们！
感兴趣的朋友，欢迎邮件联系我 lazycat.manatee@gmail.com&lt;/p&gt;

&lt;p&gt;不能来的朋友，也欢迎友情转发一下，谢谢你们。 ;)&lt;/p&gt;</content><author><name></name></author><summary type="html">自己最近成立了一家新公司，主要做Linux的应用和整体解决方案（不做操作系统）。</summary></entry></feed>