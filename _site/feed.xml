<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-08-24T08:58:55+08:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">青海行</title><link href="http://localhost:4000/travel/2019/08/22/qinghai.html" rel="alternate" type="text/html" title="青海行" /><published>2019-08-22T00:00:00+08:00</published><updated>2019-08-22T00:00:00+08:00</updated><id>http://localhost:4000/travel/2019/08/22/qinghai</id><content type="html" xml:base="http://localhost:4000/travel/2019/08/22/qinghai.html">&lt;p&gt;上半年一直在忙，趁着小朋友暑假，带上家人和朋友一起来一次自驾青海大环线，体验大美青海湖。&lt;/p&gt;

&lt;h3 id=&quot;第一站华山-推荐指数-&quot;&gt;第一站：华山 推荐指数 ⭐⭐⭐&lt;/h3&gt;
&lt;p&gt;第一天从武汉开往华阴市，准备攀登西岳华山。&lt;/p&gt;

&lt;p&gt;根据往年的翻车定律，第一站必翻车，果不其然，本来以为看了天气预报，早上小雨下午晴天的攻略，绵绵细雨整整下了一天，只能在微风拂过才能隐隐约约瞥见华山一貌，因为到处都是云海，华山的险峻全程都没有体验到，手动捂脸 ;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;推荐晴天游华山，下雨天千万不要来，山上的天气太难预测了。&lt;/p&gt;

&lt;h3 id=&quot;第二站渭南-推荐指数-&quot;&gt;第二站：渭南 推荐指数 ⭐⭐⭐&lt;/h3&gt;
&lt;p&gt;去西宁的路上，会经过渭南这个城市，渭南的气温只有21°，傍晚非常凉爽，晚上带着小朋友们来到公园听爷爷奶奶演唱正宗的秦腔，薰陶一下我们中国的传统戏剧文化。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/3.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;第三站乾陵-推荐指数-&quot;&gt;第三站：乾陵 推荐指数 ⭐⭐⭐&lt;/h3&gt;
&lt;p&gt;去固原的路上，下错了高速来到了永寿县，既来之则安之，顺道逛一下唐朝乾陵，乾陵建于公元684年，是世界上独一无二的夫妻皇帝合葬陵，埋葬着唐高宗李治和女皇武则天。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/5.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;游客们都在参观者陵墓外的石人群，我找了一片松树林，躺在石凳上，几缕微风拂过，阳光从松枝缝隙间洒下，看着屹立乾陵旁上千年的石像，从历史长河去感受这一切，我们平常世俗所追寻的一切都毫无意义…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/7.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/8.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;本以为乾陵是一个文人墨客的地方，实际上是一座户外圣地, 非常适合带小朋友一起来攀登游玩。&lt;/p&gt;

&lt;h3 id=&quot;第四站须弥山-推荐指数-&quot;&gt;第四站：须弥山 推荐指数 ⭐⭐⭐⭐&lt;/h3&gt;
&lt;p&gt;宁夏固原县的须弥山是一处拥有一百多座石窟的风景胜地，这一带的石窟始凿于北魏，距今一千四百多年。古时，山下的寺口子河被称为石门水，水上曾设石门关，成为丝绸之路东段的重要孔道，也是中原汉王朝与西域各少数民族争战与修好的重要关防。如今，关址已荡然无存，但分布在八座山崖上的石窟，仍然焕发著艺术的光辉。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG11.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG12.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG13.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG14.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG15.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG17.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG18.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG19.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG20.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG21.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;须弥山佛教博物馆非常震撼，强烈推荐小朋友来这里，既可以野外攀岩，又可以增长见识，领略广博的佛教文化。&lt;/p&gt;

&lt;h3 id=&quot;第五站塔尔寺-推荐指数-&quot;&gt;第五站：塔尔寺 推荐指数 ⭐⭐⭐&lt;/h3&gt;
&lt;p&gt;从武汉浪了2000多公里，在进入青海省边界的时候，天空左边乌云密布，电闪雷鸣，右边晴空万里，风和日丽，在暴风云边缘开很过瘾，一会暴雨倾下，一会蓝天白云的，很是新奇。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG22.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG23.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG24.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;青海的第一站去了传说中的塔尔寺，塔尔寺是中国藏传佛教格鲁派六大寺院之一，也是世界第二大佛宗喀巴大师的诞生地。
栩栩如生的酥油花真是巧夺天工，美轮美奂，整个寺庙的藏传佛教氛围非常浓厚，就是前来朝拜的信众太多了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG25.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG26.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG27.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG28.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG29.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;第六站青海湖-推荐指数-&quot;&gt;第六站：青海湖 推荐指数 ⭐⭐⭐⭐⭐&lt;/h3&gt;
&lt;p&gt;看完塔尔寺以后，就开车直奔青海湖，当一车人从高速下来看到青海湖的时候，大家都非常兴奋，青海湖东翼的地理位置非常独特，融合了沙漠、草原、湿地和湖泊四种地貌，形成了强烈的地貌冲击感。&lt;/p&gt;

&lt;p&gt;因为太兴奋了，大家看到青海湖就直接冲进去，忘记带水带任何装备，看着1公里的路，生生走了10公里，但是小朋友在青海湖边玩滑沙玩的不亦乐乎，看来只要好玩，都忘记渴了，哈哈哈哈。&lt;/p&gt;

&lt;p&gt;围绕着青海湖边都是牧民的牧场，随处可看到放牧的牦牛、绵羊和马，和牧民商量一下，每个人10元就可以开进牧场随便玩了，比去景区更便宜，风景也更美, 在牧场的草丛中还会发现肥美的野兔和土拨鼠，哈哈哈，我在想什么？ ;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG30.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG31.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG32.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;晚上在青海湖的共和县入住（黑马河镇大部分民宿都在2019年被政府拆除了），第二天从共和县的一条放牛野路开进去，可以直接开到青海湖边。&lt;/p&gt;

&lt;p&gt;Wow，站在青海湖边才能领略青海湖之大，大的就像大海一样一望无际，走在海浪边，看着成群的牦牛在海边细嚼慢咽的吃水草，饮青海湖水，那种感觉太田园了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG34.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG35.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG36.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG37.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG38.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG39.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG40.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG41.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们开进来的这个沙滩是平常牧民放牧给牛羊喝水的地方，除了牧民外没有游客知道这个地方，看着湛蓝的海面，吹拂着和煦的海风，这样的美景和生态仿佛让我想起来同样干净无瑕的泸沽湖，不是因为赶路，真的想在这里躺一个月，每天就看着这些可爱的牦牛，享受着惬意的一切。&lt;/p&gt;

&lt;h3 id=&quot;第七站茶卡盐湖-推荐指数-&quot;&gt;第七站：茶卡盐湖 推荐指数 ⭐⭐⭐&lt;/h3&gt;
&lt;p&gt;茶卡盐湖，号称天空之镜，网红打卡景点，我们这次去的不是老的茶卡盐湖景区，而是去的新开的“天空一号”的新景区，人更少。
虽然第一次看盐湖还是很美的，但是看了后面的翡翠湖以后，才觉得茶卡盐湖不值得一看。&lt;/p&gt;

&lt;p&gt;这几年外出旅游比较多，总结了一条规律，风景的优美程度和门票是成反比的，越是那些不要门票的地方才真的是大美风光。&lt;/p&gt;

&lt;p&gt;所以，建议第一次来青海湖的朋友，果断PASS茶卡盐湖吧，和大柴旦镇的翡翠湖比，真的是一个天上一个地下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG42.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG43.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG44.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG102.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;第八站挖车-推荐指数-&quot;&gt;第八站：挖车 推荐指数 ⭐&lt;/h3&gt;
&lt;p&gt;共和县下一站就是德令哈，本来准备带小朋友去看外星人遗址，没想到头一天晚上托素湖涨水把周边的外星人遗址给淹没了，全程封路。&lt;/p&gt;

&lt;p&gt;没办法只好退而求其次，带大家去尕海玩，从国道旁的一个小的石子路下去，一路颠簸托底很是疯狂，当终于开到湖边的时候一个不小心，车陷到沼泽地旁边的沙地中，因为沙子和淤泥太过于潮湿，即使用四驱模式都没法脱离困境，反而越陷越深。&lt;/p&gt;

&lt;p&gt;中间尝试在轮胎底部垫了衣物也无济于事，通过几轮和烂泥的较量，车彻底抛锚了，当时还是蛮担心的，因为车上还有两个小朋友，这荒郊野外的，真的要陷在这个工具和物资都缺乏的湿地，其实是非常危险的， 而且当时车上的军工铲、脱困板、防滑链都忘在家里面了。&lt;/p&gt;

&lt;p&gt;野外遇到问题的时候千万不要慌张，冷静的观察周边的环境，一定有可以帮的上忙的材料。&lt;/p&gt;

&lt;p&gt;一行人向国道的方向走了2公里，准备把国道旁的石头搬运回来，在路中间发现了类似陷车的现场，发现车辙里面有很多的枯木枝，这些枯木枝应该是上一次陷车人留下来的，既然他们已经出去，这些枯木枝一定是发挥了作用的。&lt;/p&gt;

&lt;p&gt;全车的人加上小朋友，每个人都抱了很多枯木枝回到车旁。两人一组，每个人用手把轮胎后面的沙子和淤泥全部刨开，减少倒车阻力，同时把捡来的枯木枝全部垫在四个轮子下面增加车轮的摩擦力，大家一起刨了1.5个小时的车，终于一把倒车自救成功。&lt;/p&gt;

&lt;p&gt;整个自救过程，中间失败了很多次，当终于把车从淤泥里面解救出来的那一刻，大伙包括小朋友都发自内心的欢呼雀跃，我想那不仅仅是人基本的求生欲望，更是一个团队的力量，如果当时的情况单凭我一个人，我可能要挖一天，可能在我挖车自救之前就已经放弃了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG46.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG47.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG48.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG49.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG50.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在回忆起来，旅行的目的不仅仅只是游览祖国的大好河山，旅行的目的是在我们体验大自然的时候，身心获得更多成长，我想这次挖车过程中的各种状况、实践和团队协作的体验将是小朋友终身难忘的经历，也是任何学校和课本不会教授的东西。&lt;/p&gt;

&lt;h3 id=&quot;第九站大柴旦-推荐指数-&quot;&gt;第九站：大柴旦 推荐指数 ⭐⭐⭐⭐⭐&lt;/h3&gt;
&lt;p&gt;大柴旦镇主要有两个地方值得游览，一个是小柴旦湖，另外一个是大柴达木湖。&lt;/p&gt;

&lt;p&gt;小柴旦湖位于315国道和3011国道的交叉地带，湖周围有四条石子路可以直接从国道开下去，这些石子路在导航上是看不到的，快到交叉口时，放慢速度，注意观察湖边车扎堆的地方，就可以找到开进去的石子路。&lt;/p&gt;

&lt;p&gt;小柴旦湖没有青海湖的壮阔，但是非常幽静漂亮，可以带小朋友们在湖边捡石头，注意不要玩太久了，因为小柴旦湖的湖水是周围雪山融化的雪水汇集而成，比较冰凉，长时间容易着凉。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG51.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG52.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG53.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在去往大柴达木湖的路上，发现了一个采石场，加上周围的矿山和沙漠，真的非常像在火星上开车一样，视野很开阔。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG54.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG55.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG56.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果要说青海湖大环线最美的景点，非翡翠湖莫数，横跨3000公里只为瞥见你的美，那种美只有你身临现场才能感受到。&lt;/p&gt;

&lt;p&gt;翡翠湖位于青海省海西蒙古族藏族自治州原大柴旦化工厂盐湖采矿区内。
因湖水在阳光下清澈湛蓝，色如翡翠，故得名“翡翠湖”。
翡翠湖的颜色和湖中所含的矿物质浓度以及以天气情况相关，不同的时间段翡翠湖的颜色会有所不同。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG57.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG58.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG59.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG60.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG61.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG62.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG63.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG64.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG65.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG66.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG67.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG68.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;翡翠湖的美，原来我只有在翻看国家地理杂志才能窥见，当我真的站在这种人间仙境的地方时，你真的会被她美哭了，真的太美太美了…&lt;/p&gt;

&lt;p&gt;就像牛背山一样，本没有翡翠湖存在，翡翠湖原来本是大柴达木湖北边一片未开发的风景处女地，随着越来越多人慕名而来，今年当地政府已经在着手修建景区大门，喜欢的朋友趁早来感受，再过一年，我估计翡翠湖将平添很多人造景点和游玩项目，不再有现在这种大自然的美和宁静。&lt;/p&gt;

&lt;h3 id=&quot;第十站南八仙魔鬼城-推荐指数-&quot;&gt;第十站：南八仙魔鬼城 推荐指数 ⭐⭐⭐⭐&lt;/h3&gt;
&lt;p&gt;从大柴旦开往阿塞克的路上，有一个叫做南八仙魔鬼城。&lt;/p&gt;

&lt;p&gt;南八仙是世界最大最典型的雅丹景观之一，分布面积达千余平方公里。
这里是一列列断断续续延伸的长条形土墩与凹地沟槽间隔分布的地貌组合。
因当地岩石富含铁质，地磁强大，常使罗盘失灵，会导致无法辨别方向而迷路。&lt;/p&gt;

&lt;p&gt;说到南八仙，这个地名有个悲壮的故事，上世纪五十年代新中国刚成立，八名来自南方的女地质队员在进行石油勘探期间，遭遇严重沙尘暴迷失在这篇沙漠中，因为缺少水和食物，最终英魂长眠于此，故名南八仙。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG69.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG70.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG71.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG72.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG73.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG74.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG75.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG76.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG77.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个无人区除了没有信号、地磁强大和风景壮阔外，最吸引我的就是，各种柔软沙漠和炮弹坑太多太好玩了，这里开车你可以把全车人抖到在车里自由落体，越野一定要来这里玩，在这里颠簸一天，一个油门开上魔鬼城土丘，再从土丘上60度的坡斜切下来，哇，真的太过瘾太有驾驶乐趣了。&lt;/p&gt;

&lt;p&gt;当天快被老婆骂死，因为有些斜坡下来的时候真的感觉快要翻车的感觉，但是不用怕，只要事先研究好路径，斜切下去其实是非常安全的。&lt;/p&gt;

&lt;p&gt;不过不建议往魔鬼城里面深入，就在公路方圆10公里的位置玩，魔鬼城全境无信号，一旦车陷进去，就很容易迷路在里面成了南九仙。&lt;/p&gt;

&lt;h3 id=&quot;第十一站石油小镇-推荐指数-&quot;&gt;第十一站：石油小镇 推荐指数 ⭐&lt;/h3&gt;
&lt;p&gt;网上看攻略的时候，以为石油小镇会是一个人烟稀少的魔鬼空城，去了才知道，天啊，简直就是各路网红拍照的地方，太可怕了，人超级超级的多。
陪小朋友们玩了以后，就匆匆离去，我不太喜欢这种人特别多的地方，不建议朋友们来这个地方，这个地方除了拍照真的太无聊了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/9.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG78.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG79.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG80.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;第十二站七彩丹霞-推荐指数-&quot;&gt;第十二站：七彩丹霞 推荐指数 ⭐⭐⭐&lt;/h3&gt;
&lt;p&gt;七彩丹霞是国内唯一的丹霞地貌与彩色丘陵复合区，被《中国国家地理》评为中国最美的七大丹霞地貌之一。
如果单从美的角度看，七彩丹霞无疑是最美的丹霞地貌，如果从攀岩的角度看，我觉得还是中卫的寺口子好玩。&lt;/p&gt;

&lt;p&gt;张掖的七彩丹霞因为景区比较成熟，全程有大巴接送，整个行程比较轻松。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/qicai1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/qicai2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/qicai3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/qicai4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;第十三站祁连县-推荐指数-&quot;&gt;第十三站：祁连县 推荐指数 ⭐⭐⭐⭐⭐&lt;/h3&gt;
&lt;p&gt;位于张掖下方的祁连县是另外一个人间仙境，“祁连”是古匈奴语，意为“天山”，是青海北部的天然屏障，古为羌地，是通西域之要道，古有“青海北大门”之称，丝绸之路南线经于此。&lt;/p&gt;

&lt;p&gt;祁连县有很多美如画的地方，比如早上去的卓尔山，漫山遍野的小野花一眼望去都满是浪漫。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/zhuoershan1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/zhuoershan2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/zhuoershan3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/zhuoershan4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;领略了卓尔山，顺着八一冰川的盘山路，开到了“黑河大峡谷”，站在峡谷悬崖边往下望，真的好险好刺激，注意悬崖上都是碎石和突出的岩石，千万不要走到太边缘的地方，真的会掉下去的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG81.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG82.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG83.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG84.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG85.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG86.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG87.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG88.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG89.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;路上的时候胎被钉子扎破了，稍微充点气坚持到汽修厂补好胎继续往冰沟林海。&lt;/p&gt;

&lt;p&gt;坐在冰沟林海的山脚下，吹着风，单曲循环着“平凡的一天”，看着宫崎骏动画里才有的云，就这样一直发着呆的日子好满足。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG90.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二天路过祁连草原，到处都是朴实的牧民正在驱赶成群结对的牦牛和绵羊在草原上奔跑，特别是小牦牛，简直呆萌到极致啦，好想拉一头走啊，哈哈哈哈。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG91.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG92.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG93.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;第十四站腾格里沙漠-推荐指数-&quot;&gt;第十四站：腾格里沙漠 推荐指数 ⭐⭐⭐⭐&lt;/h3&gt;
&lt;p&gt;本来准备在回武汉之前在腾格里沙漠玩一天滑沙，可惜攻略没有做仔细，把风给忘记了，当天5级风在沙漠里刮起了沙尘暴，我们在沙尘暴里顶风作案玩了1个小时的滑沙，终于一群人顶不住钻眼的狂沙败下阵来。&lt;/p&gt;

&lt;p&gt;下次再来沙漠一定要关注风，不能只看是否有雨，不过没关系，生活本来就要有一点小小的遗憾才算美啊。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG94.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG97.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/qinghai/WechatIMG98.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;大美青海&quot;&gt;大美青海&lt;/h3&gt;
&lt;video controls=&quot;controls&quot; width=&quot;100%&quot;&gt;
  &lt;source src=&quot;http://localhost:4000/pics/qinghai/1566486937303367.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;整个自驾行程，从武汉一路往西，穿越陕西，甘肃，宁夏，青海，内蒙古回到湖北，横跨六省，全程6000多公里，耗时17天，6个人花费2.1万，等下次有机会，去青海湖的格尔木和可可西里玩。&lt;/p&gt;

&lt;p&gt;这次在甘肃和甘南边境开的时候，看到美丽的甘南，心里直痒痒。甘南，我们明年见, 哈哈哈哈。&lt;/p&gt;</content><author><name></name></author><summary type="html">上半年一直在忙，趁着小朋友暑假，带上家人和朋友一起来一次自驾青海大环线，体验大美青海湖。</summary></entry><entry><title type="html">技术人怎么领导一个开源社区？</title><link href="http://localhost:4000/opensource/2019/08/03/how-open-source-works.html" rel="alternate" type="text/html" title="技术人怎么领导一个开源社区？" /><published>2019-08-03T00:00:00+08:00</published><updated>2019-08-03T00:00:00+08:00</updated><id>http://localhost:4000/opensource/2019/08/03/how-open-source-works</id><content type="html" xml:base="http://localhost:4000/opensource/2019/08/03/how-open-source-works.html">&lt;p class=&quot;line-quote&quot;&gt;技术人怎么做开源社区？&lt;/p&gt;

&lt;p&gt;这个问题，每年都会有很多朋友问起我这个问题，问的久了，发现其实每次跟朋友聊的时候都在说重复的东西。
像我这样懒的人，今天决定干脆整理一下写出来，下次其他朋友再问起，我就直接把这篇博客发出去，哈哈哈哈。&lt;/p&gt;

&lt;h3 id=&quot;强悍的技术能力&quot;&gt;强悍的技术能力&lt;/h3&gt;
&lt;p&gt;很多公司和组织其实没有明白开源社区的本质，开源社区的本质其实还是技术，技术的本质就是你写了一个非常牛逼的项目，但是这个世界上还有能力比你更强的高手，他们看了你的项目非常喜欢，但是想往里面加点方便自己的功能。这时候，他们往往会花几个晚上甚至几个月的业余时间来研究你的代码，hacking it，当他们终于实现自己的功能时候，就会发送一个高质量的补丁给你，希望你能Review后合并。&lt;/p&gt;

&lt;p&gt;这个时候，其实最考验开源项目作者的能力，因为这个补丁的贡献者的能力可能比作者还强，会写非常高质量的代码，作者不但要读懂补丁的代码，还要考虑代码风格和补丁对整体架构的影响，保证补丁合并后不但功能增强，还要求补丁不能引入新的Bug和安全漏洞。&lt;/p&gt;

&lt;p&gt;所以，开源社区做的好，第一个就是技术基本功要过硬，而不只是很多公司想的，搞一个运营部门，什么都说好，因为开源社区里大多数人都是顶尖的技术高手，光说“亲，谢谢你”是没用的，高手更喜欢被作者和同样牛逼的高手认同。你给这些高手的补丁提出你的代码改进建议或者直接合并补丁是他们最期待的东西。&lt;/p&gt;

&lt;h3 id=&quot;要会夸人&quot;&gt;要会夸人&lt;/h3&gt;
&lt;p&gt;大多数技术高手其实很容易做到刚才我说的第一点，但是第二点，我想90%的技术人都做不到。&lt;/p&gt;

&lt;p&gt;夸人为什么这么重要？&lt;/p&gt;

&lt;p&gt;开源社区除了很强的技术基因以外，它还具有很强的社交属性。简而言之就是你要想办法让这些社区的参与者获得挑战和成就感。&lt;/p&gt;

&lt;p&gt;举个例子，有人想给我的 Awesome-Tab (Emacs最著名的标签插件) 贡献一个补丁，使得它可以具备Ace Jump这个功能，我第一眼看到，其实知道怎么实现的，但是这时候最应该做的反而是，鼓励这些功能要求者自己去实现这个功能。&lt;/p&gt;

&lt;p&gt;可能当时这个开发者并不具备开发他想要功能的能力，但是他因为喜欢这个功能，对这个事情有超强的意愿，然后他会想方设法，不睡觉花很长时间去研究，去攻克技术难题，因为世界上他对这个功能最执着，也具备最强攻克难题的决心。当他历尽千辛万苦终于实现这个功能的时候，他已经不仅仅是社区的贡献者，他会从心理上变成开源项目的作者，对这个开源项目有深深的认同感，因为他被这个开源项目的复杂性给虐过好多晚上，同时他也在攻克的过程中对开源项目的代码细节越来越熟悉。一旦这个时候你合并他的补丁，会更加激励他。从我十几年的开源社区经验来看，当一个开发者贡献了一个很难的补丁以后，他往往还会贡献第二个，第三个，甚至以后变成这个开源项目中贡献最大的贡献者。&lt;/p&gt;

&lt;p&gt;但是，我看到很多技术人遇到Github有人提出Issues时，不是鼓励社区用户变成社区贡献者，而是自己坑次坑次的把代码写完了，功能实现了，需求提出者当然很高兴，但是你因为对自己的技术和虚荣太过于自信，导致你错失了一个锻炼开源贡献者的机会。长此以往，开源项目只是你个人代码的FTP，但鲜有合作开发者帮你，当有一天你因为工作，生活或者只是简简单单的厌烦，开源社区就会因为你个人的原因而死掉。&lt;/p&gt;

&lt;p&gt;还是以Awesome-Tab为例，其中一个开发者，贡献了自适应Emacs主题的补丁，我就狠狠的夸他，从最基础的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Thanks man&lt;/code&gt; 到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Wow, cool man&lt;/code&gt; 甚至 &lt;code class=&quot;highlighter-rouge&quot;&gt;Awesome, you are definitely a genius!&lt;/code&gt; , 大多数技术人会觉得这种夸奖很浮夸，但是我要告诉你的是，当你这样被别人夸奖的时候，你会飞上天的，因为一个著名开源社区的作者当时的技术水平是你十年以后才能达到的水平，但是获得这种浮夸的夸奖以后，你真的会上天的，以后你会像打鸡血一样继续给社区项目贡献。&lt;/p&gt;

&lt;p&gt;这就是开源社区社交属性的源泉，学会变着法子夸人，如果你不会夸，我告诉你一个方法，去那些著名的开源社区项目中，看那些已经合并的PR里面，翻他们的聊天记录，你就知道著名开源项目的作者是怎么夸人的了。&lt;/p&gt;

&lt;h3 id=&quot;readme和文档一定要写的详细&quot;&gt;README和文档一定要写的详细&lt;/h3&gt;
&lt;p&gt;很多朋友都会觉得做开源社区很难，或者有什么技巧，其实开源社区一点技巧都没有，都是扎扎实实最简单的东西。&lt;/p&gt;

&lt;p&gt;第三点就是README和文档，一个非常好的README应该怎么写？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先要用一两句话说清楚这个项目是干嘛的，切忌不要炫耀技术，说自己多么多么牛逼，用户不关心，你要说你的项目可以给用户带来什么？&lt;/li&gt;
  &lt;li&gt;在第一段话下面，放一张截图，最好是几秒的GIF动图，让用户看完以后马上懂这个项目是干啥的，如果看完动图以后，用户的感觉是 “我Ca，这个项目好牛逼，我一定要把它折腾好”，你就成功了一半了&lt;/li&gt;
  &lt;li&gt;最简单的安装文档，你要想尽任何办法把安装文档写的最简单易懂，因为一旦用户感兴趣你的项目后，马上就会想到怎么安装？一个复杂的安装文档会导致用户受挫，最终放弃你的项目&lt;/li&gt;
  &lt;li&gt;简单的用法，先告诉用户一个简单的用法，先不要着急把所有功能写出来，用户安装以后马上就可以实验就最好，一定要遏止住自己把所有功能堆砌出来的冲动，慢慢来&lt;/li&gt;
  &lt;li&gt;用户简单方法会了以后，写各种高级功能和FAQ，避免常见问题困扰用户&lt;/li&gt;
  &lt;li&gt;到这里，你已经做到了60分了，加一张架构图和架构图的原理说明，架构图用Google Docs来画，注意颜色和布局，画得漂亮点，如果原理太长，可以考虑做一个链接，不是谁都关心架构设计，一个好的架构设计图会让那些技术高手快速弄懂原理，培养潜在的开源社区贡献者&lt;/li&gt;
  &lt;li&gt;添加一个Todolist，写下你即将要做的功能，相当于一个简单的roadmap, 不管用户还是潜在的开发者都非常关心作者对这个项目的未来规划&lt;/li&gt;
  &lt;li&gt;最后10分怎么弄？把怎么贡献代码的文档写好，最好不要超过3步，方便初学者快速贡献代码&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;按照上面的方式把README写好，就等着高手来贡献吧，不要着急，文档好了，自然有人来看来贡献。
README写不好的结果往往是用户连安装都困难，更不用说将来有高手来帮你贡献代码。&lt;/p&gt;

&lt;p&gt;README写完以后，可以写一些API手册和Example，越多越好，文档永远都是运营开源社区的软实力。&lt;/p&gt;

&lt;h3 id=&quot;issue和patch处理一定要快&quot;&gt;Issue和Patch处理一定要快&lt;/h3&gt;
&lt;p&gt;一般来说，任何Issue和Patch处理的速度一定要快，我一般早上和晚上会分别看一下Github，如果问题很容易解决，我一般在晚上的时候会解决后再睡觉。如果短时间解决不了，也会在下面添加评论告诉社区用户我当时的想法。&lt;/p&gt;

&lt;p&gt;只要有真诚的回应，这个社区项目就是活跃的，健康的。&lt;/p&gt;

&lt;p&gt;有时候我们看一个社区项目是否活跃，不能光看Commit是否足够多，Issue和PR的数量也是重要的参考数据。&lt;/p&gt;

&lt;p&gt;很多时候，要做的更好，你可以在Issue和PR中不断的和贡献者们聊天，对，聊天。
你们聊的越High，他们越高兴，而且这些聊天记录往往夹杂很多技术技巧，以后当用户遇到问题后，用Google等搜索引擎搜素到这些Issue和PR的技术内容，都是一种潜在的传播方式。&lt;/p&gt;

&lt;h3 id=&quot;代码要注意分支管理&quot;&gt;代码要注意分支管理&lt;/h3&gt;
&lt;p&gt;当一个开源项目活跃开发的时候，往往会引入不稳定的Commit，不同的分支不但方便不同开发者快速测试不同的功能，还能保持正式版本的稳定性。&lt;/p&gt;

&lt;p&gt;代码分支的管理是开源项目兼具新功能尝鲜和正式版稳定的基础保障措施。&lt;/p&gt;

&lt;p&gt;如果发布新版本最好打一个Tag，这样别人好切换不同的版本帮你测试Bug。&lt;/p&gt;

&lt;h3 id=&quot;挂ci机器人&quot;&gt;挂CI机器人&lt;/h3&gt;
&lt;p&gt;如果你的项目不是那种下载即可使用的脚本代码，需要编译成二进制才能体验。为了让用户快速尝鲜，你需要在Github上挂一个CI机器人，每当你推送任何补丁，CI机器人都会帮你自动构建最新版二进制。&lt;/p&gt;

&lt;p&gt;这样用户每次使用新版的时候，就不用自己编译代码，直接下载CI机器人编译好的二进制即可。&lt;/p&gt;

&lt;p&gt;切记，你减少了用户使用你软件的门槛，就会把潜在用户量提高一个数量级。&lt;/p&gt;

&lt;h3 id=&quot;多写技术博客&quot;&gt;多写技术博客&lt;/h3&gt;
&lt;p&gt;Github更多的是在代码和聊天层面解决社区协作的问题，但是真的把开源社区运营好，少不了系统化的技术博客。&lt;/p&gt;

&lt;p&gt;在技术博客中画画架构图，写点介绍文档，示例代码，分享一下小技巧，都是推广开源项目很好的方式。&lt;/p&gt;

&lt;p&gt;如果你的文风不错，博客写的通俗易懂引人发笑，还会达到授人于渔的效果。&lt;/p&gt;

&lt;h3 id=&quot;注意copyright&quot;&gt;注意Copyright&lt;/h3&gt;
&lt;p&gt;如果你拷贝了别人的代码，不管是文件的开头还是代码注释中，一定要写清楚原始作者的信息，这是开源社区最起码的尊重。&lt;/p&gt;

&lt;h3 id=&quot;有幽默感&quot;&gt;有幽默感&lt;/h3&gt;
&lt;p&gt;不管别人是帮助你，吐槽你，都要保持一颗幽默的心，能抗多少吐槽，开源项目就能走的有多远。&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;

&lt;p class=&quot;line-quote&quot;&gt;开源社区做好的本质就是：技术好、会夸人、多写文档脸皮厚&lt;/p&gt;</content><author><name></name></author><summary type="html">技术人怎么做开源社区？</summary></entry><entry><title type="html">Snails 5.0 发布了</title><link href="http://localhost:4000/emacs/2019/07/29/snails-5.0.html" rel="alternate" type="text/html" title="Snails 5.0 发布了" /><published>2019-07-29T00:00:00+08:00</published><updated>2019-07-29T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2019/07/29/snails-5.0</id><content type="html" xml:base="http://localhost:4000/emacs/2019/07/29/snails-5.0.html">&lt;p&gt;自从&lt;a href=&quot;https://manateelazycat.github.io/emacs/2019/07/21/snails.html&quot;&gt;Snails1.0&lt;/a&gt;发布一周后，Snails版本号不知不觉刷到5.0了，感谢社区同学积极测试和提供帮助。&lt;/p&gt;

&lt;p&gt;Snails 5.0的更新如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;166次更新，新增5个社区贡献者，合并了9个社区补丁, 修复了超多bug&lt;/li&gt;
  &lt;li&gt;补全窗口启动速度从 1~2 秒优化到瞬间 （插件首次加载依然需要点时间）&lt;/li&gt;
  &lt;li&gt;采用队列渲染策略替换了抢占式渲染策略，将多后端渲染性能提升了3~5倍&lt;/li&gt;
  &lt;li&gt;默认集成了9种搜索后端，按 “标签分组、打开文件、最近文件、书签、函数定义、当前文件全文、项目文件全文、当前目录文件、整个磁盘文件” 的优先级进行依次搜索, 已经覆盖了90%的代码搜索和导航需求&lt;/li&gt;
  &lt;li&gt;其中当前文件全文和项目文件全文基于ripgrep来实现，特别是在超大文件的内容搜索上，要比Emacs内置的 isearch/grep 快很多&lt;/li&gt;
  &lt;li&gt;多后端搜索时，当前选中的后选词状态保持不变，不会像1.0那样异步后端来数据后选中后选词被强制切换成第一个&lt;/li&gt;
  &lt;li&gt;在 fuz.el 这个库安装以后，自动切换成模糊匹配算法，可以快速按照任意片段进行搜索，而不需要连续输入相邻字符&lt;/li&gt;
  &lt;li&gt;增加了 snails-search-point 命令，方便快速搜索当前光标处的内容&lt;/li&gt;
  &lt;li&gt;增加了很多自定义选项供大家个性化设置&lt;/li&gt;
  &lt;li&gt;更多更新细节请查看&lt;a href=&quot;https://github.com/manateelazycat/snails/commits/master&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;虽然整个架构进行了大幅度的优化和增强，但是Snails的插件接口依然是非常简单灵活，你只用花5分钟编写20行左右的过滤函数, 即可快速完成你想要的插件。&lt;/p&gt;

&lt;p&gt;Snails的&lt;a href=&quot;https://manateelazycat.github.io/emacs/2019/07/23/snails-framework.html&quot;&gt;架构设计&lt;/a&gt;非常简单易懂，欢迎各路高手来&lt;a href=&quot;https://github.com/manateelazycat/snails/pulls&quot;&gt;贡献你自己的插件&lt;/a&gt; !&lt;/p&gt;</content><author><name></name></author><summary type="html">自从Snails1.0发布一周后，Snails版本号不知不觉刷到5.0了，感谢社区同学积极测试和提供帮助。</summary></entry><entry><title type="html">在Mac版的Emacs中使用RIME输入法</title><link href="http://localhost:4000/emacs/2019/07/24/use-rime-in-emacs.html" rel="alternate" type="text/html" title="在Mac版的Emacs中使用RIME输入法" /><published>2019-07-24T00:00:00+08:00</published><updated>2019-07-24T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2019/07/24/use-rime-in-emacs</id><content type="html" xml:base="http://localhost:4000/emacs/2019/07/24/use-rime-in-emacs.html">&lt;p&gt;做为一个资深的Emacs党，期望每件事情都用Emacs来搞定，同时做为中国人，输入中文真的是刚需。
而&lt;a href=&quot;https://github.com/tumashu/pyim&quot;&gt;pyim&lt;/a&gt;就是一个非常牛逼的中文输入法框架。&lt;/p&gt;

&lt;p&gt;虽然深爱着Emacs，即使pyim内置了词库，pyim在很多时候还是无法满足长句输入的需求，偶尔还是要切换到外部的输入法输入中文，比如写这篇博客的时候。但是外部输入法最大的问题是不知道Emacs的输入状态，所以经常需要来回切换输入法状态，非常不爽。&lt;/p&gt;

&lt;p&gt;几个月前知道pyim可以直接调用RIME输入法做为后端进行输入，那时候pyim才把Linux平台搞定，自己这段时间一直用Mac，所以只能眼馋的份，今天折腾了一下终于搞定了Mac下让pyim使用RIME输入法，坑比较多，故写下此文，帮助Mac版的Emacs用户。&lt;/p&gt;

&lt;p&gt;先上一张动态效果图，增强你克服困难的决心，哈哈哈哈:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/pyim/rime.gif&quot; alt=&quot;pyim-and-rime&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-更新pyim和posframe到最新版&quot;&gt;1 更新pyim和posframe到最新版&lt;/h3&gt;
&lt;p&gt;为了支持RIME输入法需要把 &lt;a href=&quot;https://github.com/tumashu/pyim&quot;&gt;pyim&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/tumashu/posframe&quot;&gt;posframe&lt;/a&gt;这两个库更新到最新，否则有可能会报posframe的错误&lt;/p&gt;

&lt;h3 id=&quot;2-安装rime输入法&quot;&gt;2 安装RIME输入法&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew cask &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;squirrel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-下载librime源码&quot;&gt;3 下载librime源码&lt;/h3&gt;
&lt;p&gt;下载librime源码:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt; https://github.com/rime/librime.git &lt;span class=&quot;nt&quot;&gt;--depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-编译liberime&quot;&gt;4 编译liberime&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;4.1 下载liberime源码&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://gitlab.com/liberime/liberime.git &lt;span class=&quot;nt&quot;&gt;--depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;4.2 创建librime xbuild目录&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为liberime动态库是需要根据librime来编译的，同时RIME输入法本身就带了librime.1.dylib，所以我们并不需要下载巨大无比的xcode去编译librime.1.dylib&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/librime/xbuild/lib/Release/

&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /Library/Input&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Methods/Squirrel.app/Contents/Frameworks/librime.1.dylib ~/librime/xbuild/lib/Release/librime.dylib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;4.3 编译liberime.so文件&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/liberime

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RIME_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/librime

make liberime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面的命令自动会去 ~/librime/xbuild/lib/Release/ 目录下找 librime.dylib 文件，并在 ~/liberime/buid/ 目录下生成 liberime.so 动态库文件&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;4.4 把 librime.1.dylib 文件拷贝到系统lib目录&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; /Library/Input&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Methods/Squirrel.app/Contents/Frameworks/librime.1.dylib /usr/local/lib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;否则后面 (require ‘liberime) 的时候会下面的错误&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dyld: Library not loaded: @rpath/librime.1.dylib
  Referenced from: ...
  Reason: image not found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;5-配置pyim&quot;&gt;5 配置pyim&lt;/h3&gt;
&lt;p&gt;拷贝 librime.so 文件到 ~/.emacs.d/ 目录下，然后在 ~/.emacs 写下如下配置即可:&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;load-path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file-truename&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;~/.emacs.d/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;load-path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'pyim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'posframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'liberime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;default-input-method&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pyim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pyim-page-tooltip&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'posframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pyim-page-length&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;liberime-start&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Library/Input Methods/Squirrel.app/Contents/SharedSupport&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file-truename&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;~/.emacs.d/pyim/rime/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;liberime-select-schema&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;luna_pinyin_simp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pyim-default-scheme&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'rime-quanpin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;6-增加rime候选词数量&quot;&gt;6 增加RIME候选词数量&lt;/h3&gt;

&lt;p&gt;liberime默认只能获取5个后选词，用下面的方法可以增加RIME后端时的后选词数量。&lt;/p&gt;

&lt;p&gt;创建 ~/.emacs.d/pyim/rime/default.custom.yaml 文件，内容如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;patch:
     &lt;span class=&quot;s2&quot;&gt;&quot;menu/page_size&quot;&lt;/span&gt;: 100
     &lt;span class=&quot;s2&quot;&gt;&quot;speller/auto_select&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&quot;speller/auto_select_unique_candidate&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;上面这么长一篇的文字都是我在Emacs下用pyim配合RIME后端来进行输入的，整个过程非常流畅，长句输入也非常非常的赞。&lt;/p&gt;

&lt;p&gt;终于不用在Emacs中使用外部输入法了，哈哈哈哈。&lt;/p&gt;</content><author><name></name></author><summary type="html">做为一个资深的Emacs党，期望每件事情都用Emacs来搞定，同时做为中国人，输入中文真的是刚需。 而pyim就是一个非常牛逼的中文输入法框架。</summary></entry><entry><title type="html">Snails架构设计</title><link href="http://localhost:4000/emacs/2019/07/23/snails-framework.html" rel="alternate" type="text/html" title="Snails架构设计" /><published>2019-07-23T00:00:00+08:00</published><updated>2019-07-23T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2019/07/23/snails-framework</id><content type="html" xml:base="http://localhost:4000/emacs/2019/07/23/snails-framework.html">&lt;h3 id=&quot;怎么设计让多后端模糊搜索性能达到极致&quot;&gt;怎么设计让多后端模糊搜索性能达到极致？&lt;/h3&gt;
&lt;p&gt;前天发布了&lt;a href=&quot;https://manateelazycat.github.io/emacs/2019/07/21/snails.html&quot;&gt;Snails&lt;/a&gt;这个新型的模糊搜索框架。
Snails的这个项目的主要目的是：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;交互简单易用&lt;/li&gt;
  &lt;li&gt;5分钟编写一个新的插件&lt;/li&gt;
  &lt;li&gt;搜索速度快&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;要让Emacs快，我们首先要了解Emacs的优势和脾气，这样我们从设计上才能让Emacs更快：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;多线程不可行： Emacs的多线程设计上，每次只能运行一个线程上下文，所以不能采用像Gtk/Qt那样通过子线程的思路来解决耗时搜索时不卡界面的方法，因为一旦Emacs切换到耗时操作所在线程，耗时操作放还是会卡主Emacs。&lt;/li&gt;
  &lt;li&gt;多进程可行：简单的搜索，比如搜索打开的文件，就放到Emacs进程中处理，耗时的搜索需要放到子进程里面处理, 这样耗时搜索的时候就不会卡主Emacs了&lt;/li&gt;
  &lt;li&gt;避免子进程轰炸Emacs：子进程每更新一行结果不要去刷新Emacs的界面，对用户的输入流畅性干扰很大，在进程搜索完成以后再统一渲染结果，所以后端Shell命令就要选择高效率的工具，比如选 ripgrep 而不是 grep, 选 fd 而不是 find (Rust大法好，哈哈哈)&lt;/li&gt;
  &lt;li&gt;按键缝隙不要创建子进程：一个人的输入间隔在 50ms ~ 200ms 之间，因为子进程创建一次很昂贵，所以在敲击键盘的时候就不要创建异步后端的子进程，以节省系统资源，这时候可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;run-with-idle-timer&lt;/code&gt; 函数做延迟处理，当用户手指头一松开在发愣的时候才创建搜索子进程&lt;/li&gt;
  &lt;li&gt;尽快杀掉旧进程：当用户输入很快时，有一些子进程还在搜索旧的输入字符串，可以在新的搜索进程开始之前尽快的杀掉那些还还没有结束的旧进程，减少对系统资源的占用。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;架构设计&quot;&gt;架构设计&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/snails/framework.png&quot; alt=&quot;snails framework&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在想清楚设计思路以后，代码实现就很简单了，深入的思考和清晰的思路永远是架构设计的核心，代码不过是架构设计的表现方式而已。&lt;/p&gt;

&lt;p&gt;简单一句话来概括框架：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;每次用户输入的时候框架分配一个新的 ticker ,
后端们自己去搜索，得到结果的时候看看自己的 ticker 是不是最新的，
最新的就能用，不是最新的就丢掉。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Snails整体架构上分为框架部分和后端实现部分。&lt;/p&gt;

&lt;h4 id=&quot;框架部分的职责&quot;&gt;框架部分的职责：&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;监听用户输入，生成新的input ticker，然后给所有后端分配搜索任务&lt;/li&gt;
  &lt;li&gt;检查后端的结果, 如果input ticker过期后抛弃后端搜索结果，如果input ticker没有过期就染后端搜索结果&lt;/li&gt;
  &lt;li&gt;用户选择搜索结果后执行后端指定的命令&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;每次用户输入新的字符串后，都会产生一个input ticker作为标记传给后端，后端完成后需要带着标记来检查搜索结果是否过期（正在搜索的时候，用户又进行了新的搜索）&lt;/p&gt;

&lt;p&gt;同步后端是在用户输入变化的时候就启动，异步后端是在用户手指头松开的一瞬间才启动。&lt;/p&gt;

&lt;p&gt;这样既保证了简单搜索的及时响应，又保障了耗时操作不会卡主Emacs。&lt;/p&gt;

&lt;h4 id=&quot;搜索后端的职责&quot;&gt;搜索后端的职责：&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;搜索和过滤字符串&lt;/li&gt;
  &lt;li&gt;解析出显示名和真实的搜索结果&lt;/li&gt;
  &lt;li&gt;用户确认后，对搜索结果调用自定义命令&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;后端在实现时不用了解框架中处理细节，只用做好搜索、过滤和自定义命令就可以了。&lt;/p&gt;

&lt;p&gt;一个完整的后端实现规模在30~50行，一般在5分钟就可以写完整个后端插件的代码。&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;欢迎来贡献&lt;a href=&quot;https://github.com/manateelazycat/snails/new/master&quot;&gt;新的插件&lt;/a&gt;, 一起来构建下一代模糊搜索框架。&lt;/p&gt;</content><author><name></name></author><summary type="html">怎么设计让多后端模糊搜索性能达到极致？ 前天发布了Snails这个新型的模糊搜索框架。 Snails的这个项目的主要目的是： 交互简单易用 5分钟编写一个新的插件 搜索速度快</summary></entry><entry><title type="html">Snails超级快的模糊搜索框架</title><link href="http://localhost:4000/emacs/2019/07/21/snails.html" rel="alternate" type="text/html" title="Snails超级快的模糊搜索框架" /><published>2019-07-21T00:00:00+08:00</published><updated>2019-07-21T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2019/07/21/snails</id><content type="html" xml:base="http://localhost:4000/emacs/2019/07/21/snails.html">&lt;h3 id=&quot;anything-helm-ivy&quot;&gt;Anything, Helm, Ivy&lt;/h3&gt;
&lt;p&gt;十几年前和&lt;a href=&quot;http://rubikitch.com/&quot;&gt;rubikitch&lt;/a&gt;、&lt;a href=&quot;https://sachachua.com/blog/2018/09/interview-with-thierry-volpiatto/&quot;&gt;Thierry Volpiatto&lt;/a&gt;一起创建了Anything这个模糊搜索框架。&lt;/p&gt;

&lt;p&gt;Anything做为当时第一个模糊搜索框架，因为其多后端搜索和强大的框架设计，比当时 ido 的效率要快很多，特别是当你要模糊搜索多个后端，却不想记一堆快捷键的时候，Anything真的很爽。&lt;/p&gt;

&lt;p&gt;后来我和rubikitch都忙于工作，Thierry Volpiatto十几年坚持不懈的做了很多代码改进和重构，以至于后来创建了更为健壮和模块化的&lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;Helm&lt;/a&gt;,
Helm到目前为止都是Emacs下最强大的模糊搜索框架。&lt;/p&gt;

&lt;p&gt;最近几年，超级黑客&lt;a href=&quot;https://oremacs.com/&quot;&gt;Oleh Krehel&lt;/a&gt;创建的&lt;a href=&quot;https://github.com/abo-abo/swiper&quot;&gt;Ivy&lt;/a&gt;, 以其简洁的交互和超快的速度，俘获了大批Emacser的青睐。&lt;/p&gt;

&lt;h3 id=&quot;snails一个超快的现代化和易于扩展的模糊搜索框架&quot;&gt;Snails一个超快的、现代化和易于扩展的模糊搜索框架&lt;/h3&gt;
&lt;p&gt;我曾经也尝试过Ivy, 非常简洁，而且速度超快，一点都不卡，但是Ivy有一个和我习惯冲突的设计是，Ivy一次只能搜索一个后端，对于我这种常年用Anything/Helm的老年人来说，让我按照分类来记住不同的搜索后端快捷键，真的很麻烦。&lt;/p&gt;

&lt;p&gt;同时，Helm发展了十几年的时间，虽然非常成熟和强大，但是想要基于Helm写一个新的插件，都要看半天文档和小心各种细节。&lt;/p&gt;

&lt;p&gt;所以，我有时候在想，我能否重新设计一个新的模糊搜索框架，兼具Helm和Ivy的优点呢？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;像Helm那样支持多个后端同时搜索，特别是最近文件 + 已经打开的文件 + 本地磁盘全局搜索三个后端配合一起搜索的时候，几乎不存在找不到的文件&lt;/li&gt;
  &lt;li&gt;像Ivy那样快，不管怎么搜索都是秒开，而且搜索的过程中不要让Emacs变得卡顿&lt;/li&gt;
  &lt;li&gt;界面像 Sublime/VSCode 那样，弹出一个单独的固定窗口，不要像Helm那样破坏窗口布局，也不要像Ivy那样在minibuffer上随着输入来回跳动&lt;/li&gt;
  &lt;li&gt;交互易用，就是输入搜索字符，上下移动后，按回车就行了，没有其他复杂操作&lt;/li&gt;
  &lt;li&gt;插件门槛的编写达到最低，只要会基本的Elisp语法，会写过滤函数，任何插件都应该在5分钟之内完成&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以我创建了&lt;a href=&quot;https://github.com/manateelazycat/snails&quot;&gt;Snails&lt;/a&gt;这个全新的模糊搜索插件来满足我上面的全部要求, 发一张效果图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/snails/snails.png&quot; alt=&quot;snails&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;
&lt;p&gt;因为这个插件还在活跃开发中，安装和使用文档请见 &lt;a href=&quot;https://github.com/manateelazycat/snails&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;插件介绍&quot;&gt;插件介绍&lt;/h3&gt;
&lt;p&gt;编写Snails的插件真的超级简单，只要你会基本的Elisp语法，会编写列表过滤函数，你可以在5分钟之内编写完一个新的插件！&lt;/p&gt;

&lt;p&gt;Snails从分类上有两种插件语法：同步插件和异步插件&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;同步插件适用于那些马上可以获取补全列表信息的，比如获取打开的文件，最近浏览的文件这种&lt;/li&gt;
  &lt;li&gt;异步插件适用于那些需要耗时搜索的操作，比如grep目录，在整个磁盘找文件这种&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;编写同步插件&quot;&gt;编写同步插件&lt;/h4&gt;
&lt;p&gt;我们用内置的&lt;code class=&quot;highlighter-rouge&quot;&gt;snails-backend-recentf&lt;/code&gt;插件来讲解怎么编写同步插件：&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'snails-core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'recentf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;recentf-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;snails-create-sync-backend&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&quot;RECENTF&quot;&lt;/span&gt;

 &lt;span class=&quot;ss&quot;&gt;:candidate-filter&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dolist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;recentf-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;or&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;string-equal&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string-match-p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;regexp-quote&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-to-list&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'candidates&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;
                       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;snails-wrap-file-icon&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                      &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

 &lt;span class=&quot;ss&quot;&gt;:candiate-do&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;find-file&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;provide&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'snails-backend-recentf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;:name 参数是插件的名字，请为你的插件取一个不同的名字，Snails根据插件的名字来插入搜索结果&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;:candidate-filter 是一个过滤函数, &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; 参数指用户输入的字符串, 你需要返回一个候选词列表，列表的每一项是一个格式为 &lt;code class=&quot;highlighter-rouge&quot;&gt;(list display-name candidate-content)&lt;/code&gt;的对象, 对象的第一个元素 &lt;code class=&quot;highlighter-rouge&quot;&gt;display-name&lt;/code&gt; 是显示给用户的候选名字, 对象的第二个元素&lt;code class=&quot;highlighter-rouge&quot;&gt;candidate-content&lt;/code&gt; 是真实的补全结果，后面会传给回调函数 &lt;code class=&quot;highlighter-rouge&quot;&gt;candidate-do&lt;/code&gt;. 如果什么没有搜索到，可以返回nil，Snails框架会在结果中隐藏返回nil的后端。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;:candidate-do 是一个确认函数，当你按 Ctrl+m 的时候执行这个函数，函数内容你可以自由发挥。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上面这段插件代码，它的意思是，如果用户什么都没有输入，显示所有最近浏览的文件，如果有输入，根据用户输入来过滤最近浏览的文件，用户确认后，用 &lt;code class=&quot;highlighter-rouge&quot;&gt;find-file&lt;/code&gt; 这个命令打开文件。&lt;/p&gt;

&lt;h4 id=&quot;编写异步插件&quot;&gt;编写异步插件&lt;/h4&gt;
&lt;p&gt;我们用内置的&lt;code class=&quot;highlighter-rouge&quot;&gt;snails-backend-mdfind&lt;/code&gt;插件来讲解怎么编写异步插件：&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'snails-core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;snails-create-async-backend&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&quot;MDFIND&quot;&lt;/span&gt;

 &lt;span class=&quot;ss&quot;&gt;:build-command&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;featurep&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'cocoa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mdfind&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;'%s'&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

 &lt;span class=&quot;ss&quot;&gt;:candidate-filter&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;candidate-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dolist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;candidate&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;candidate-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-to-list&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'candidates&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;snails-wrap-file-icon&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

 &lt;span class=&quot;ss&quot;&gt;:candiate-do&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;find-file&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;provide&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'snails-backend-mdfind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;:name 参数是插件的名字，请为你的插件取一个不同的名字，Snails根据插件的名字来插入搜索结果&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;:build-command 是一个命令行参数构建函数，&lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; 是用户输入的字符串, 你需要返回一个字符串列表，列表第一个是调用的Shell工具的名字，列表剩下的字符串是传递给Shell工具的参数。如果你不想进一步搜索，可以直接返回nil。Snails会在结果中隐藏返回nil的后端。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;:candidate-filter 是一个过滤函数, &lt;code class=&quot;highlighter-rouge&quot;&gt;candidate-list&lt;/code&gt; 是Shell命令返回的字符串列表, 你需要返回一个候选词列表，列表的每一项是一个格式为 &lt;code class=&quot;highlighter-rouge&quot;&gt;(list display-name candidate-content)&lt;/code&gt;的对象, 对象的第一个元素 &lt;code class=&quot;highlighter-rouge&quot;&gt;display-name&lt;/code&gt; 是显示给用户的候选名字, 对象的第二个元素&lt;code class=&quot;highlighter-rouge&quot;&gt;candidate-content&lt;/code&gt; 是真实的补全结果，后面会传给回调函数 &lt;code class=&quot;highlighter-rouge&quot;&gt;candidate-do&lt;/code&gt;. 如果什么没有搜索到，可以返回nil，Snails框架会在结果中隐藏返回nil的后端。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;:candidate-do 是一个确认函数，当你按 Ctrl+m 的时候执行这个函数，函数内容你可以自由发挥。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上面这段插件代码举例，如果用户输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;awesome&lt;/code&gt;, 他会构建一个命令字符串列表 &lt;code class=&quot;highlighter-rouge&quot;&gt;(list &quot;mdfind&quot; &quot;'awesome'&quot;)&lt;/code&gt; 用于创建搜索子进程，当子进程完成时，进程返回候选列表给candidate-fitler过滤函数, 过滤函数过滤Shell命令返回的结果进行候选词渲染。用户确认后，用 &lt;code class=&quot;highlighter-rouge&quot;&gt;find-file&lt;/code&gt; 这个命令打开文件。&lt;/p&gt;

&lt;p&gt;Snails非常智能，它会管理所有异步后端的子进程，当用户修改输入时，Snails会自动创建新的子进程继续搜索，同时把那些旧的子进程杀掉。不管用户输入多快，都不会卡主Emacs。&lt;/p&gt;

&lt;h3 id=&quot;最后&quot;&gt;最后&lt;/h3&gt;
&lt;p&gt;Snails插件编写简单吧？&lt;/p&gt;

&lt;p&gt;如果你和我有同样的口味，欢迎试用。&lt;/p&gt;

&lt;p&gt;如果你想玩一下Elisp，欢迎编写新的插件。;)&lt;/p&gt;</content><author><name></name></author><summary type="html">Anything, Helm, Ivy 十几年前和rubikitch、Thierry Volpiatto一起创建了Anything这个模糊搜索框架。</summary></entry><entry><title type="html">禁止TabNine不停的催我升级收费版本</title><link href="http://localhost:4000/emacs/2019/07/19/silent-tabnine.html" rel="alternate" type="text/html" title="禁止TabNine不停的催我升级收费版本" /><published>2019-07-19T00:00:00+08:00</published><updated>2019-07-19T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2019/07/19/silent-tabnine</id><content type="html" xml:base="http://localhost:4000/emacs/2019/07/19/silent-tabnine.html">&lt;p&gt;前天推荐了非常好用的&lt;a href=&quot;https://manateelazycat.github.io/emacs/2019/07/17/tabnine.html&quot;&gt;TabNine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这几天用下来，越用越喜欢，而且觉得免费版就够了, 但是TabNine在大型项目（超过400kb索引）的时候，会一直在 echo-area 催我升级收费版本，有点烦人。&lt;/p&gt;

&lt;p&gt;研究了一下 company 的源代码，写了一段补丁，把下面的代码粘贴到 ~/.emacs 配置文件中， TabNine就不会在大项目中反复的提示你升级收费版本了：&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;;; The free version of TabNine is good enough,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; and below code is recommended that TabNine not always&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; prompt me to purchase a paid version in a large project.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;defadvice&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;company-echo-show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;around&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;disable-tabnine-upgrade-message&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;company-message-func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ad-get-arg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;company-message-func&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stringp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;company-message-func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string-match&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The free version of TabNine only indexes up to&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;company-message-func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;ad-do-it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;世界终于清静了，但是鉴于TabNine补全的爽快，还是建议大家多多去&lt;a href=&quot;https://tabnine.com/buy&quot;&gt;购买&lt;/a&gt;TabNine的收费版本, 支持一下作者。&lt;/p&gt;</content><author><name></name></author><summary type="html">前天推荐了非常好用的TabNine</summary></entry><entry><title type="html">TabNine 利用机器学习技术来补全项目代码</title><link href="http://localhost:4000/emacs/2019/07/17/tabnine.html" rel="alternate" type="text/html" title="TabNine 利用机器学习技术来补全项目代码" /><published>2019-07-17T00:00:00+08:00</published><updated>2019-07-17T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2019/07/17/tabnine</id><content type="html" xml:base="http://localhost:4000/emacs/2019/07/17/tabnine.html">&lt;p&gt;我好久没有推荐过一款Emacs插件了，感觉大部分的Emacs插件只是设计的非常贴心，但是真的让我惊讶的Emacs插件真的很少了。&lt;/p&gt;

&lt;p&gt;今天就来推荐一个让我惊讶的技术：TabNine&lt;/p&gt;

&lt;p&gt;网上对 TabNine 的评价:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TabNine是一种基于OpenAI的语言模型（GPT-2）来实现的智能代码补全技术。
它支持23种编程语言、5种编辑器，使用简单，效果惊艳。
不少使用过的网友说：TabNine是他们用过的最好的代码补全工具，这是属于程序员的杀手级应用。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我记得最开始看到TabNine的时候是一个多月前，当时以为只是无脑AI新闻，并没有太认真去看待它，认为不过是一个噱头。但是从我短时间的体验来看，我改变了看法。&lt;/p&gt;

&lt;h3 id=&quot;我对tabnine的评价&quot;&gt;我对TabNine的评价&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TabNine通过很复杂的技术来学习当前项目的源代码，
通过研究程序员的编码习惯最终来预测接下来可能会键入的单词或长句。

传统的代码补全主要是基于当前文件的抽象语法树来进行上下文语义分析，
现在做的最好的技术就是LSP协议，这些传统的语法补全技术在补全对象的属性或者方法的时候很好用。

但是TabNine完全基于一种更为开放的分析方式来实现代码补全，
在它分析现有项目的源代码后，不管是补全模板、方法变量还是代码片段，
TabNine会根据它自己的算法来进行智能排序, 给出它认为最佳的匹配结果。

打个比方，TabNine在光标处线索不够的时候，它有点像个精神病人那样喃喃自语，
但是一旦它预测准确以后，它可以补全非常一长串代码，
这段代码虽然不是属性和方法名，但是一旦准确预测，
你可以敲一下Tab键就完成当前行的代码编写。
而且这种技术在越大的项目中，代码预测补全效果越好。

整体的感觉，就像一个懂你的机器人在帮你找你自己的代码思想和代码片段，
在必要的时候帮你敲很长很长的代码。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;说的很玄乎，举两个例子：&lt;/p&gt;

&lt;h4 id=&quot;elisp代码补全&quot;&gt;Elisp代码补全&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/tabnine/elisp.png&quot; alt=&quot;Elisp exampele&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上面是我写的Emacs插件aweshell.el，当我敲击 &lt;code class=&quot;highlighter-rouge&quot;&gt;current-window&lt;/code&gt; 的时候，TabNine 的补全建议是：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;current-window (selected-window)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;current-window (selected-window)&lt;/code&gt; 不是一个正常的语法补全结构，
但是当我敲 &lt;code class=&quot;highlighter-rouge&quot;&gt;current-window&lt;/code&gt; 这段代码的时候，脑袋里就是希望通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;(selected-window)&lt;/code&gt; 方法赋值结果给变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;current-window&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;TabNine 在这个时候就让你很爽了，不管他的算法是怎么做的，这就是你想要的片段，Tab一下子就补全了。&lt;/p&gt;

&lt;h4 id=&quot;javascript代码补全&quot;&gt;JavaScript代码补全&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/pics/tabnine/js.png&quot; alt=&quot;JavaScript exampele&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上面是一段JavaScript的项目代码，其中有一段 &lt;code class=&quot;highlighter-rouge&quot;&gt;machineDict[res.data[i].MachineId] = res.data[i].Name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;很多时候，我们会通过编写库和函数的方式来抽象重复代码，但是真实的项目中，对于一些使用一两次的代码片段，往往没有必要写函数去过度包装。&lt;/p&gt;

&lt;p&gt;所以当我在另外一个函数中写下 &lt;code class=&quot;highlighter-rouge&quot;&gt;machineDict[res.data[i].MachineId] = res.data[i]&lt;/code&gt; 然后敲击 . 的时候，TabNine 通过算法分析出，我很有可能是想写 &lt;code class=&quot;highlighter-rouge&quot;&gt;res.data[i].Name&lt;/code&gt; ， 那也正是我想要的。&lt;/p&gt;

&lt;p&gt;注意这个例子中， Name 仅仅只是服务器返回的JSON结构体的一个属性值，从传统的抽象语法树补全技术看，&lt;code class=&quot;highlighter-rouge&quot;&gt;res.data[i]&lt;/code&gt; 仅仅就是临时变量，除非真实从服务器请求，否则基于属性和方法的技术来解析，根本就不知道 &lt;code class=&quot;highlighter-rouge&quot;&gt;res.data[i]&lt;/code&gt; 是什么类型的对象，更不用说代码补全了。&lt;/p&gt;

&lt;p&gt;而TabNine的技术就是对传统语法补全技术的一种极好的补充，因为程序员每天大部分时间都是在重复自己以前的编程思想和代码片段，为什么不让机器来辅助人从重复的代码拷贝中解脱出来呢？&lt;/p&gt;

&lt;h3 id=&quot;tabnine-emacs补全前端&quot;&gt;TabNine Emacs补全前端&lt;/h3&gt;
&lt;p&gt;TabNine的Emacs插件在 &lt;a href=&quot;https://github.com/TommyX12/company-tabnine&quot;&gt;company-tabnine&lt;/a&gt; , 里面有详细的安装方法。&lt;/p&gt;

&lt;h3 id=&quot;最后&quot;&gt;最后&lt;/h3&gt;
&lt;p&gt;从整体上看TabNine就是找各种token来暴力学习，所以性能的表现上比很多LSP服务器还要好，我在Emacs中使用TabNine补全，非常顺滑。&lt;/p&gt;

&lt;p&gt;我希望有一天这种技术可以直接感知我的思想，这样我就不用动手了， 想一想代码就自动写完了，哈哈哈。&lt;/p&gt;</content><author><name></name></author><summary type="html">我好久没有推荐过一款Emacs插件了，感觉大部分的Emacs插件只是设计的非常贴心，但是真的让我惊讶的Emacs插件真的很少了。</summary></entry><entry><title type="html">Jekyll实时刷新</title><link href="http://localhost:4000/tech/2019/07/14/jekyll-livereload.html" rel="alternate" type="text/html" title="Jekyll实时刷新" /><published>2019-07-14T00:00:00+08:00</published><updated>2019-07-14T00:00:00+08:00</updated><id>http://localhost:4000/tech/2019/07/14/jekyll-livereload</id><content type="html" xml:base="http://localhost:4000/tech/2019/07/14/jekyll-livereload.html">&lt;p&gt;用Jekyll写博客时，总是写一写的需要手动刷新一下浏览器看效果，今天看了一下Jekyll的官方文档&lt;/p&gt;

&lt;p&gt;用下面的命令启动Jekyll服务器, 而不是命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;，博客内容修改完成以后浏览器就可以实时自动刷新。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll serve &lt;span class=&quot;nt&quot;&gt;--livereload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置好实时刷新功能以后，博客的编写预览更加无缝衔接了，以下是我平常写博客的工作流:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;在Emacs中用 markdown-mode 写博客&lt;/li&gt;
  &lt;li&gt;手指头一松开，&lt;a href=&quot;https://github.com/manateelazycat/auto-save&quot;&gt;auto-save&lt;/a&gt; 插件会自动保存文件内容&lt;/li&gt;
  &lt;li&gt;用 Hammerspoon 切换到浏览器，浏览器的内容已经自动刷新&lt;/li&gt;
  &lt;li&gt;完成后用 Magit 快捷键，同步文章到 Github&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">用Jekyll写博客时，总是写一写的需要手动刷新一下浏览器看效果，今天看了一下Jekyll的官方文档</summary></entry><entry><title type="html">Vue.js的实践小技巧</title><link href="http://localhost:4000/web/2019/07/14/vue-tooltips.html" rel="alternate" type="text/html" title="Vue.js的实践小技巧" /><published>2019-07-14T00:00:00+08:00</published><updated>2019-07-14T00:00:00+08:00</updated><id>http://localhost:4000/web/2019/07/14/vue-tooltips</id><content type="html" xml:base="http://localhost:4000/web/2019/07/14/vue-tooltips.html">&lt;h3 id=&quot;vuejs是计算机发展的趋势使然&quot;&gt;Vue.js是计算机发展的趋势使然&lt;/h3&gt;
&lt;p&gt;计算机的历史总是遵循分久必合合久必分的趋势，最开始Web前端硬件和浏览器的性能不够，为了用户体验和性能，开发者会选择像 Rails 类似的框架 来进行服务端模板渲染以提升性能，但是服务端模板渲染的技术弊端是，当前端界面复杂度达到PC软件的规模时，界面的调整太依赖于后端和DOM结构树的查询节点树，一旦要更新页面布局和设计时就需要后端改动一下，前端也改动一下，一旦前端界面大改时，JQuery这种依赖模板和DOM查询节点的方法就会很被动，因为界面布局和结构发生巨变时，DOM节点查询链条很容易断裂，代码也不敢轻易变动和删除，导致项目越久，代码冗余越多，项目也变得很难维护。&lt;/p&gt;

&lt;p&gt;Vue.js 主要解决的问题是，整个前端的界面修改都是在浏览器中完成的, 服务端只用提供API即可，而且界面整体逻辑是通过属性来动态绑定的，界面布局调整的JS代码并不依赖于DOM的节点查询，如果需要修改界面布局和设计时，只用大胆的调整前端模板和CSS样式即可，JS逻辑和后端代码都不用配合修改，整个界面改动的负担很小，可维护性也非常好。&lt;/p&gt;

&lt;p&gt;原来学Rails的时候，对Vue.js和React的技术抱有偏见，很多Web的开发者总是争论到底是后端服务渲染好，还是Vue.js这种前端框架好？在我看来，任何撇开时代背景和用户需求的技术讨论都是个人喜好性质的讨论。&lt;/p&gt;

&lt;p&gt;从总体来说，用户肯定希望界面交互越复杂越精致越好，不论后端渲染还是Vue.js这种前端框架，从理论上都是可以满足用户的计算需求的，只是Vue.js这种前端框架把真实的计算逻辑和界面布局给完全分开了，当快速迭代产品设计和交互体验时，Vue.js的更新和维护负担更小，成本更低的改动就意味着生产力和竞争力。&lt;/p&gt;

&lt;p&gt;所以Vue.js这种前端框架的大行其道，并不是技术框架在技术层面的谁优谁劣，而是Web终端硬件性能提升和用户对Web应用功能期待的一种自然而然的演化行为，虽然Vue.js/React这种技术有很多技术细节和优点，但是从架构设计上来看，其实当今的Web技术又回到微软时代的那种前后端分离的技术，架构上是没有区别的，只是Vue.js相对于MFC、Gtk这类的技术，通过属性绑定和动态DOM的技术能够更有生产力的编写前端界面。&lt;/p&gt;

&lt;h3 id=&quot;vuejs-的优点&quot;&gt;Vue.js 的优点&lt;/h3&gt;
&lt;p&gt;对于我这种非常熟悉Gtk/Qt的开发者来说，我更喜欢Vue.js这种前后端分离的设计，因为前端的修改非常有效率，实时可以看到最新的界面效果，同时后端也可以做的很薄，后端从模板构造和服务的泥潭中解放出来，后端可以更专注于后端架构设计、工程化运维和性能优化。&lt;/p&gt;

&lt;p&gt;Vue.js 的优点主要有以下几点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;通过属性绑定和DOM Tree Diff更新的技术来实时渲染Web界面，前端开发生产力非常高&lt;/li&gt;
  &lt;li&gt;Vue.js的作者是国人，中文文档写的非常好，我想这也是Vue.js在中国非常流行的原因，官方的文档看一天即可入门&lt;/li&gt;
  &lt;li&gt;内置 VueRouter、Vuex全家桶，包括 vue-cli 的发布，真正做到开箱即用，不用折腾各种插件和让人绝望的Webpack配置即可快速把精力投入到产品开中&lt;/li&gt;
  &lt;li&gt;*.vue 文件一体化的设计，模板、JS代码和CSS样式，一个组件一个文件，非常好维护&lt;/li&gt;
  &lt;li&gt;插件生态非常好，常用的各种插件都有Vue的版本，npm或者yarn都可以快速实验插件功能&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;vuejs-的一些小技巧&quot;&gt;Vue.js 的一些小技巧&lt;/h3&gt;
&lt;p&gt;虽然Vue.js的&lt;a href=&quot;https://cn.vuejs.org/index.html&quot;&gt;官方文档&lt;/a&gt;写的非常好，但是通过几个项目的实践，还是有一些隐晦的地方需要自己动手才能搞懂。&lt;/p&gt;

&lt;h4 id=&quot;vuejs路由的支持&quot;&gt;Vue.js路由的支持&lt;/h4&gt;
&lt;p&gt;Vue.js官方文档可能从入门的角度看，都是用单文件的方式来展示Vue.js的示例，但是真实的项目往往都是需要前端路由来控制，即使看完Vue.js/Vuex的文档，我相信大多数人还是不知道怎么修改一个 vue-cli 项目去支持前端页面的路由跳转。&lt;/p&gt;

&lt;h4 id=&quot;路由跳转之appvue&quot;&gt;路由跳转之App.vue&lt;/h4&gt;
&lt;p&gt;首先 App.vue 文件要改成 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;&lt;/code&gt; 的形式，这样所有Vue.js动态切换的页面都会在 router-view 中进行替换，下面是我的 App.vue, 这个文件除了调样式外基本不用作任何改动。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/router-view&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/template&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/style&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;路由跳转之mainjs&quot;&gt;路由跳转之main.js&lt;/h4&gt;
&lt;p&gt;其次 main.js 要修改成下面的样子，这样你只用在 components 目录添加新的组件，然后更新 VueRouter 的内容即可实现各种路由跳转。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;router.beforeEach&lt;/code&gt; 这一段代码的意思是，路由更新是更改浏览器标签的标题。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;vue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VueRouter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;vue-router&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./App.vue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Login&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./components/Login.vue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Home&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./components/Home.vue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;productionTip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VueRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VueRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Login title&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/home&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Home title&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;vuejs-组件中属性关键字&quot;&gt;Vue.js 组件中属性关键字&lt;/h3&gt;

&lt;p&gt;*.Vue组件文件中一般分为几个不同的代码区域：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;data() { … }&lt;/li&gt;
  &lt;li&gt;props: { … }&lt;/li&gt;
  &lt;li&gt;computed: { … }&lt;/li&gt;
  &lt;li&gt;watch: { … }&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;初学者一般看到这几个关键字都是一脸懵逼的，其实 Vue.js 是对组件不同属性的用法，分别用不同的关键字进行区分的。&lt;/p&gt;

&lt;h4 id=&quot;data---&quot;&gt;data() { … }&lt;/h4&gt;

&lt;p&gt;data代码区域是组件内部自己用的，可以看做组件内部属性初始值的声明区域, 一般都是下面的形式:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;attr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;attr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;attr3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;props---&quot;&gt;props: { … }&lt;/h4&gt;
&lt;p&gt;props代码区域是专门用于父组件进行属性绑定的，比如Foo组件是一个画布，就可以声明&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样在其他组件Bar调用Foo时，就可以在模板中写入:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Foo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;600&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;400&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当然上面的 width 和 height 也可以换成 Foo 组件内部的属性值，只要父组件 Bar 属性发生变化，Foo组件的 width 和 height 属性也一起关联更新。&lt;/p&gt;

&lt;p&gt;所以 props 区域的状态可以看成当前组件和其父组件之间属性绑定和通信的一种方式。&lt;/p&gt;

&lt;h4 id=&quot;computed---&quot;&gt;computed: { … }&lt;/h4&gt;
&lt;p&gt;computed代码区域是用作组件内部属性和Vuex Store状态绑定的，比如 Vuex 有一个 count 的状态，可以通过以下部分来声明组件内部的 count 属性, 一旦 Store 的 count 发生变化，组件内部的 count 属性也会跟着一起变化。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;watch---&quot;&gt;watch: { … }&lt;/h4&gt;
&lt;p&gt;watch代码区域是专门用户监听 Store 状态变化的，一旦 Store 状态发生变化，就可以在 watch 代码区域中调用对应的组件函数, 比如&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#demo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Foo Bar&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当 Store 的 firstName 发生变化时，就可以更新组件内部的 fullName 属性。&lt;/p&gt;

&lt;h3 id=&quot;属性键字区分总结&quot;&gt;属性键字区分总结&lt;/h3&gt;
&lt;p&gt;看懂上面的说明后，按照以下方式记忆，然后多实践就可以很清晰明了了：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;data() { … } – 组件内部属性&lt;/li&gt;
  &lt;li&gt;props: { … } – 需要和父组件通信的属性&lt;/li&gt;
  &lt;li&gt;computed: { … } – 和Store状态绑定的属性&lt;/li&gt;
  &lt;li&gt;watch: { … } – 监听Store状态变化的回调区域&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;store子模块&quot;&gt;Store子模块&lt;/h3&gt;
&lt;p&gt;当项目很复杂时，需要针对不同用途的 Store 进行单文件管理，而不是所有状态都放在 store/index.js 里面。&lt;/p&gt;

&lt;p&gt;比如有一个单独的状态模块 store/modules/Backround.js :&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;zoomRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;zoomRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zoomRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;updateZoomRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ratio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zoomRatio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ratio&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;namespaced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;getters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mutations&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 *.Vue 组件中，动态绑定 Store 的 zoomRatio 状态，就需要这样写 computed 声明:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nl&quot;&gt;zoomRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Background/zoomRatio&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
         &lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Background/updateZoomRatio&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因为 Background.js 是 store/modules 子目录下声明的单独Store模块&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先需要在 Background.js 模块中增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;namespaced: true&lt;/code&gt; 的关键字以支持命名空间&lt;/li&gt;
  &lt;li&gt;其次需要在组件中用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Background/zoomRatio&lt;/code&gt; 的前缀去调用 Store 状态。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样才能在组件中对Store子模块的状态进行正常访问&lt;/p&gt;

&lt;h3 id=&quot;eventbus-回调调用两次的问题&quot;&gt;EventBus 回调调用两次的问题&lt;/h3&gt;
&lt;p&gt;对于组件之间的单向通讯，比如子组件发送信号给父组件，有时候用 EventBus 更轻便。&lt;/p&gt;

&lt;p&gt;一般我们都会在 mounted 区域中通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;EventBus.$on(&quot;signal&quot;, this.callback)&lt;/code&gt; 的方式进行事件回调处理:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;mounted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;EventBus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个地方的坑在于，一旦页面切换时，页面加载一次就会调用一次 &lt;code class=&quot;highlighter-rouge&quot;&gt;EventBus.$on(&quot;signal&quot;, this.callback)&lt;/code&gt; , 页面加载多次就会导致调用多次事件回调，在项目实践中会产生各种诡异的现场。&lt;/p&gt;

&lt;p&gt;要保证页面加载的时候只调用一次事件回调，就需要在 beforeDestroy 区域中调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;EventBus.$off(&quot;signal&quot;)&lt;/code&gt; 方法:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;beforeDestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;EventBus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段代码的意思是，当页面销毁时注销事件回调，当页面创建时再注册事件回调，这样就解决 EventBus 回调调用两次的诡异问题。&lt;/p&gt;

&lt;h3 id=&quot;最后&quot;&gt;最后&lt;/h3&gt;
&lt;p&gt;虽然上面写了这么多，但是从整体上看，一旦你熟悉了Vue.js的使用方式，Vue.js已经算同等规模开源项目里面坑比较少的项目，用起来还是非常省心和好用的。&lt;/p&gt;

&lt;p&gt;上面就是我在Vue.js项目实践中的一些技巧分享，希望看到此文章的同学少走一些弯路。&lt;/p&gt;</content><author><name></name></author><summary type="html">Vue.js是计算机发展的趋势使然 计算机的历史总是遵循分久必合合久必分的趋势，最开始Web前端硬件和浏览器的性能不够，为了用户体验和性能，开发者会选择像 Rails 类似的框架 来进行服务端模板渲染以提升性能，但是服务端模板渲染的技术弊端是，当前端界面复杂度达到PC软件的规模时，界面的调整太依赖于后端和DOM结构树的查询节点树，一旦要更新页面布局和设计时就需要后端改动一下，前端也改动一下，一旦前端界面大改时，JQuery这种依赖模板和DOM查询节点的方法就会很被动，因为界面布局和结构发生巨变时，DOM节点查询链条很容易断裂，代码也不敢轻易变动和删除，导致项目越久，代码冗余越多，项目也变得很难维护。</summary></entry></feed>