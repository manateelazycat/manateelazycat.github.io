<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-31T16:41:06+08:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">重新起航</title><link href="http://localhost:4000/life/2019/10/31/sailing.html" rel="alternate" type="text/html" title="重新起航" /><published>2019-10-31T00:00:00+08:00</published><updated>2019-10-31T00:00:00+08:00</updated><id>http://localhost:4000/life/2019/10/31/sailing</id><content type="html" xml:base="http://localhost:4000/life/2019/10/31/sailing.html">&lt;p&gt;自己最近成立了一家新公司，主要做Linux的应用和整体解决方案（不做操作系统）。&lt;/p&gt;

&lt;p&gt;最近在招熟悉Linux、Gtk/Qt、Xorg的编程高手，只要自学能力强, 不要求一定要有多少工作经验，来公司可以有大牛手把手传授你十多年编程武艺。&lt;/p&gt;

&lt;p&gt;要求：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;热爱Linux，自学能力强&lt;/li&gt;
  &lt;li&gt;熟悉Gtk或者Qt, 熟悉Xorg或者OpenGL更佳&lt;/li&gt;
  &lt;li&gt;能够来武汉工作&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;感谢过去一年多关心和帮助过我的朋友们， 特别谢谢你们！
感兴趣的朋友，欢迎邮件联系我 lazycat.manatee@gmail.com&lt;/p&gt;

&lt;p&gt;不能来的朋友，也欢迎友情转发一下，谢谢你们。 ;)&lt;/p&gt;</content><author><name></name></author><summary type="html">自己最近成立了一家新公司，主要做Linux的应用和整体解决方案（不做操作系统）。</summary></entry><entry><title type="html">解决Linux下微信透明窗口的问题</title><link href="http://localhost:4000/linux/2019/09/29/wechat-transparent-window.html" rel="alternate" type="text/html" title="解决Linux下微信透明窗口的问题" /><published>2019-09-29T00:00:00+08:00</published><updated>2019-09-29T00:00:00+08:00</updated><id>http://localhost:4000/linux/2019/09/29/wechat-transparent-window</id><content type="html" xml:base="http://localhost:4000/linux/2019/09/29/wechat-transparent-window.html">&lt;h3 id=&quot;问题&quot;&gt;问题&lt;/h3&gt;
&lt;p&gt;在Linux下用微信最好的方式还是需要用DeepinWine来运行Windows版的微信客户端，DeepinWine对Wine打了很多私有补丁，这些私有补丁因为解决问题的角度不够优雅没法被Wine上游接受，所以很多Windows程序只能在DDE下配合DeepinWine才能完美运行，比如说我们今天聊的微信客户端。&lt;/p&gt;

&lt;p&gt;在非DDE环境下，Wine启动的微信客户端会有一个非常烦人的问题，每次微信窗口关闭以后，都会留下一个透明的窗口，虽然这个透明的窗口并不拦截输入事件，但是总是挡着其他程序前面看着也很烦。&lt;/p&gt;

&lt;h3 id=&quot;解决思路&quot;&gt;解决思路&lt;/h3&gt;
&lt;p&gt;启动微信的命令就绑定按键到命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/deepinwine/apps/Deepin-WeChat/run.sh&lt;/code&gt; (可以通过查看 /usr/share/applications/deepin.com.wechat.desktop 文件的 Exec 参数来获取启动命令)&lt;/p&gt;

&lt;p&gt;我们需要开发一个开机启动脚本，做两个方面的工作：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;启动后监听窗口管理器的窗口切换信号&lt;/li&gt;
  &lt;li&gt;当切换其他应用挡住微信窗口后，自动关闭微信窗口&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;启动微信就通过快捷键调用启动命令来解决，微信的透明窗口通过窗口管理器监听窗口切换信号来自动隐藏，这样每次切换微信窗口就不需要用鼠标去点击关闭按钮才能隐藏透明窗口，提高工作效率。&lt;/p&gt;

&lt;h3 id=&quot;上代码&quot;&gt;上代码&lt;/h3&gt;

&lt;h4 id=&quot;1-首先安装一下开发库&quot;&gt;1. 首先安装一下开发库：&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; python-gobject libwnck3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-把下面代码保存到-wechat_window_monitorpy-文件中&quot;&gt;2. 把下面代码保存到 wechat_window_monitor.py 文件中:&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python3
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gi&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;require_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Wnck'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'3.0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;require_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Gtk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'3.0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gi.repository&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wnck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gtk&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WeChatWindowMonitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wnck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Screen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force_update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wechat_window_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;微信&quot;&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;active_window_changed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;active_window_changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;active_window_changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;active_window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_active_window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;active_window&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;active_window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wechat_window_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;win&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;win&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wechat_window_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Gtk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;WeChatWindowMonitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;脚本源码解析:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__init__&lt;/code&gt; 函数做一些 Wnck 初始代码和窗口切换函数回调处理&lt;/li&gt;
  &lt;li&gt;active_window_changed 函数中，通过 screen.get_active_window 来获取激活窗口，当激活窗口不是微信，就在后台遍历一下所有窗口，把微信窗口隐藏&lt;/li&gt;
  &lt;li&gt;run 函数通过调用 Gtk.main 函数来保持事件循环一直运行，不会发生脚本启动就退出的问题&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;简单吧？几行代码就轻松解决了，哈哈哈哈。&lt;/p&gt;

&lt;h4 id=&quot;3-添加脚本到启动服务中&quot;&gt;3. 添加脚本到启动服务中&lt;/h4&gt;
&lt;p&gt;把脚本 wechat_window_monitor.py 拷贝到 /usr/local/bin/ 后，通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod +x wechat_window_monitor.py&lt;/code&gt; 来赋予脚本执行权限后，添加到开机启动脚本。&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;程序员的世界好可怕，只要想得到，就可以解决任何问题。&lt;/p&gt;</content><author><name></name></author><summary type="html">问题 在Linux下用微信最好的方式还是需要用DeepinWine来运行Windows版的微信客户端，DeepinWine对Wine打了很多私有补丁，这些私有补丁因为解决问题的角度不够优雅没法被Wine上游接受，所以很多Windows程序只能在DDE下配合DeepinWine才能完美运行，比如说我们今天聊的微信客户端。</summary></entry><entry><title type="html">Snails 新增加了当前目录文件搜索后端</title><link href="http://localhost:4000/emacs/2019/09/21/snails-backend-directory-files.html" rel="alternate" type="text/html" title="Snails 新增加了当前目录文件搜索后端" /><published>2019-09-21T00:00:00+08:00</published><updated>2019-09-21T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2019/09/21/snails-backend-directory-files</id><content type="html" xml:base="http://localhost:4000/emacs/2019/09/21/snails-backend-directory-files.html">&lt;p&gt;我们经常会做一个操作，按一个按键切换到当前buffer对应的dired模式，然后在当前目录下人工找一个文件并打开。&lt;/p&gt;

&lt;p&gt;今天加了一个新的后端： &lt;a href=&quot;https://github.com/manateelazycat/snails/commit/1300f084a1e3e056efaf5f7d9fa2a24ab241a822&quot;&gt;snails-backend-directory-files.el&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个后端会在默认搜索中开启，不需要任何前缀。&lt;/p&gt;

&lt;p&gt;当你要打开当前目录下的其他文件，不用切换到的dired人工搜索，直接启动 snails 搜索即可。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;相对于 snails-backend-projectile 后端的优势是，不需要当前目录处于 git 项目中, 任何目录都可以&lt;/li&gt;
  &lt;li&gt;相对于 snails-backend-fd/snails-backend-mdfind 后端的优势是 Emacs 内置的 &lt;code class=&quot;highlighter-rouge&quot;&gt;directory-files&lt;/code&gt; 函数因为不需要子进程的启动开销，所以速度更快&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;越来越方便了。&lt;/p&gt;</content><author><name></name></author><summary type="html">我们经常会做一个操作，按一个按键切换到当前buffer对应的dired模式，然后在当前目录下人工找一个文件并打开。</summary></entry><entry><title type="html">Emacs Application Framework支持大写字符事件了!</title><link href="http://localhost:4000/emacs/2019/09/21/support-capital-letter.html" rel="alternate" type="text/html" title="Emacs Application Framework支持大写字符事件了!" /><published>2019-09-21T00:00:00+08:00</published><updated>2019-09-21T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2019/09/21/support-capital-letter</id><content type="html" xml:base="http://localhost:4000/emacs/2019/09/21/support-capital-letter.html">&lt;p&gt;&lt;a href=&quot;https://manateelazycat.github.io/emacs/2018/08/06/eaf.html&quot;&gt;Emacs Application Framework&lt;/a&gt;是我为Emacs设计的新一代应用框架，可以利用PyQt5去扩展Emacs, 你可以用PyQt5去实现任何你想实现的图形应用,并完美和Emacs进行无缝融合。&lt;/p&gt;

&lt;p&gt;但是EAF从发布到现在有一个非常不爽的bug就是无法输入大写字符，几个月时间都百思不得其解。&lt;/p&gt;

&lt;h3 id=&quot;事件监听原理&quot;&gt;事件监听原理&lt;/h3&gt;
&lt;p&gt;EAF 的键盘事件监听原理是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;eaf.el 中监听Emacs端每次键盘事件敲击的钩子, 然后放到 eaf-monitor-key-event 函数中进行键盘事件过滤解析&lt;/li&gt;
  &lt;li&gt;eaf-monitor-key-event 中探测到是单字符按键的时候，通过RPC协议，发送 send_key 消息给 EAF 的Python进程&lt;/li&gt;
  &lt;li&gt;EAF Python进程接到来自 Elisp 进程的 send_key 事件消息后，在Python进程中的 fake_key_event 函数中构造Qt键盘事件 QKeyEvent , 最后通过 QApplication.sendEvent 函数发送事件给 Python 进程的 Qt5 控件&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通过上面的三个步骤，EAF实现了Emacs端控制PyQt5应用事件的完整逻辑。&lt;/p&gt;

&lt;h3 id=&quot;问题线索&quot;&gt;问题线索&lt;/h3&gt;

&lt;p&gt;每次在Emacs EAF Buffer中敲击大写字符，Emacs会报错 buffer read-only 的错误&lt;/p&gt;

&lt;h3 id=&quot;重新思考&quot;&gt;重新思考&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;既然输入大写字符时候，EAF 的Python端应用没有任何反馈，证明没有接受到Elisp端发送的键盘事件。&lt;/li&gt;
  &lt;li&gt;如果Elisp端没有发送键盘事件，一定是 eaf-monitor-key-event 这个函数没有执行&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;那每次输入大写字符时 EAF 报 read-only 的错误为什么会导致 eaf-monitor-key-event 函数没有被正常执行呢？&lt;/p&gt;

&lt;p&gt;这几个月都在想这个问题，可是每次想到这个问题，都是一头雾水，百思不得其解。&lt;/p&gt;

&lt;p&gt;今天在想这个问题的时候，我一直在反复敲击大写字符，比如我要敲击H， 左手先按 Shift ，右手按 H，左手按 Shift 的时候已经报 read-only 的错误了，突然灵光一闪…&lt;/p&gt;

&lt;h3 id=&quot;大胆猜测&quot;&gt;大胆猜测&lt;/h3&gt;

&lt;p&gt;因为 EAF 的buffer最开始设计的时候，只是用于传递窗口位置和大小给EAF的Python端，并不会在EAF Emacs buffer中敲入任何字符，所以，我把所有EAF Buffer都默认设置成 read-only 模式。&lt;/p&gt;

&lt;p&gt;会不会因为左手按Shift的时候，已经触发了 read-only 的错误， 然后导致 eaf-monitor-key-event 函数无法调用，最终无法发送大写字符的事件给EAF Python端？&lt;/p&gt;

&lt;h3 id=&quot;搞定&quot;&gt;搞定&lt;/h3&gt;

&lt;p&gt;按照上面的猜测，首先移除了 EAF Buffer 的 read-only 模式，然后在EAF Python端的 fake_key_event 函数中根据传递事件字符串是否是大写键来给 QKeyEvent 事件添加 ShiftModifier 的修饰符。&lt;/p&gt;

&lt;p&gt;重启EAF测试，哇，搞定了。&lt;/p&gt;

&lt;p&gt;皇天不负有心人，这个纠缠了我几个月的Bug终于被我给解决了，哈哈哈哈。&lt;/p&gt;</content><author><name></name></author><summary type="html">Emacs Application Framework是我为Emacs设计的新一代应用框架，可以利用PyQt5去扩展Emacs, 你可以用PyQt5去实现任何你想实现的图形应用,并完美和Emacs进行无缝融合。</summary></entry><entry><title type="html">选择Emacs最底部的窗口</title><link href="http://localhost:4000/emacs/2019/09/20/select-bottom-window.html" rel="alternate" type="text/html" title="选择Emacs最底部的窗口" /><published>2019-09-20T00:00:00+08:00</published><updated>2019-09-20T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2019/09/20/select-bottom-window</id><content type="html" xml:base="http://localhost:4000/emacs/2019/09/20/select-bottom-window.html">&lt;p&gt;我写的&lt;a href=&quot;https://github.com/manateelazycat/aweshell&quot;&gt;Aweshell&lt;/a&gt;插件有一个功能，在Emacs底部打开一个终端窗口，方便快速切换终端窗口用于调试代码。&lt;/p&gt;

&lt;p&gt;Emacs默认是没有选择最底部窗口的功能的，只有靠&lt;code class=&quot;highlighter-rouge&quot;&gt;windmove.el&lt;/code&gt;这个库做最基本的四个方向选择，选择下面的窗口用 &lt;code class=&quot;highlighter-rouge&quot;&gt;windmove-down&lt;/code&gt; 函数。&lt;/p&gt;

&lt;p&gt;所以，我用下面的代码来实现选中最底部窗口的功能：&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ignore-errors&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dotimes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;windmove-down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段代码的作用主要是利用 &lt;code class=&quot;highlighter-rouge&quot;&gt;windmove-down&lt;/code&gt; 这个函数的一个特性：如果光标已经在最底部窗口时会报错，然后利用 &lt;code class=&quot;highlighter-rouge&quot;&gt;ignore-errors&lt;/code&gt; 宏来捕捉错误，从而停止往下面找窗口的动作。&lt;/p&gt;

&lt;p&gt;一般人不会分屏50次，所以我随便写了一个 50 次循环， 哈哈哈哈。&lt;/p&gt;</content><author><name></name></author><summary type="html">我写的Aweshell插件有一个功能，在Emacs底部打开一个终端窗口，方便快速切换终端窗口用于调试代码。</summary></entry><entry><title type="html">活在此时此刻</title><link href="http://localhost:4000/reading/2019/09/18/read-live-in-current.html" rel="alternate" type="text/html" title="活在此时此刻" /><published>2019-09-18T00:00:00+08:00</published><updated>2019-09-18T00:00:00+08:00</updated><id>http://localhost:4000/reading/2019/09/18/read-live-in-current</id><content type="html" xml:base="http://localhost:4000/reading/2019/09/18/read-live-in-current.html">&lt;p&gt;最近读了一行禅师写的《活在此时此刻》，最开始是在书店闲逛的时候看到的，回家买了Kindle版，花了一个月的时间慢慢读这本书。&lt;/p&gt;

&lt;p&gt;不知道是不是《当下的力量》这本书或者其他原因，最近很享受慢慢的去读一本书，读一段，坐在小区的长椅上，去感受周围环境的一切，不管现在的处境是好的还是坏的，心中总是抱着正念去呼吸，去感受。&lt;/p&gt;

&lt;p&gt;当怀着正念思考的时候，即使遇到非常棘手的事情，再也不会抱怨，焦虑和愤怒了，因为正念告诉我自己，要善待这个世界，负面的情绪不能给我任何力量。也正是因此，现在遇到的很多困难，在以前看起来几乎不可能解决的事情，现在反而非常容易解决，困难反而因为锻炼自己的正念而变成一件我生活中更加可贵的经历。&lt;/p&gt;

&lt;h3 id=&quot;风中居所&quot;&gt;风中居所&lt;/h3&gt;
&lt;p&gt;读这本书的时候，特别喜欢里面一个叫【风中居所】的一段：&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;大约三十年前，我独自一人在我们静修处修行。我的静修处是芳云庵，在法国北部的奥德森林里。我喜欢在树林里静坐、行走。一个非常美丽的早晨，我决定一整天都待在树林里。于是，我带上一碗饭、一些芝麻和一瓶水，便出门了。我计划在外面待上一整天，但在下午三点左右，乌云就开始布满天空。那天早晨离开居所前，我将门和所有的窗户都敞开了，好让阳光和新鲜空气进去。但此时，开始刮起大风，我知道我必须回去收拾好静修处。&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;回去之后，我发现居所里一片狼藉。阵阵狂风将我桌上的文件吹得到处都是，周围变得又黑又暗。我做的第一件事便是把门和所有的窗户都关上，不让风再继续肆虐。然后，我在壁炉里生了火，等火慢慢烧起来后，我便开始收拾地上的一张张纸，将它们一起放在桌子上，并在上面放了一块小砖，随后便准备将居所里收拾得整洁有序。很快，火让一切变得温暖、快乐和惬意。我在火堆旁坐下，烤着双手，听着外面的风雨声。&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;总有些日子让你感觉不是你的日子，一切都不顺利，并且你越努力，情况就变得越加糟糕，每个人都会有那样的日子。而那就说明，是时候停下一切，回家去，关上所有的窗户，回归自己的内心。当你感觉一切都成了一团乱麻时，眼睛、耳朵、鼻子、舌头、身体和思惟便是你关闭心识的六扇窗户。关闭一切，以阻止强风吹进来，让你受苦。&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;关闭窗户，关闭门，生一堆火。通过练习正念呼吸，营造一个温暖、安逸、舒适的感觉。重新布置一切—你的感觉、你的认知、你的情绪—它们散落在各处，这是你内心的混乱。认识和拥抱每一种情绪，像我收集散落在居所各处的纸张一样收集它们；练习正念和专注，将内心的一切清理整洁。这些将会帮助你恢复平静和安宁。&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;如果我们仅依赖外部条件，那么我们就会迷失。我们需要一个可以一直依赖的庇护所、一座内心的岛屿。只要牢牢地安顿在内在岛屿上，我们就会非常安全。我们可以花时间重新发现、重新恢复自我，变得更加强壮，直到我们准备好再次出行。&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;即便你非常年轻，也可以找到自己内心的岛屿。一旦你苦不堪言，感觉没有一件事情顺心，不妨停下一切，径直前往那座岛屿。只要你有需要，不妨回归到内心的岛屿里。可以是五分钟、十分钟、十五分钟，也可以是半个小时。你将感觉自己变得更加强大，内心更加安逸。&lt;/p&gt;

&lt;p&gt;看完一行禅师这个故事，我想我更理解佛教的理念了。&lt;/p&gt;

&lt;p&gt;我们做技术的，或者做互联网的特别讲究套路，我们总是期望找到一本绝世秘籍，然后期望通过秘籍去解决我们生活中遇到的所有问题。&lt;/p&gt;

&lt;p&gt;人生也好，工作也好，生意也好，其实还是要回归内心，当你向内深入的越多，越朴素，剩下的事情其实很简单，就是努力工作，热爱生活，真诚对待他人，这就足够了。当你做到这几点，不用对生活有所期待，生活会按照最美好的方式对待你的。;)&lt;/p&gt;

&lt;p&gt;当我第一次反复读这一段的时候，心中充满了力量：&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;回去之后，我发现居所里一片狼藉。阵阵狂风将我桌上的文件吹得到处都是，周围变得又黑又暗。我做的第一件事便是把门和所有的窗户都关上，不让风再继续肆虐。然后，我在壁炉里生了火，等火慢慢烧起来后，我便开始收拾地上的一张张纸，将它们一起放在桌子上，并在上面放了一块小砖，随后便准备将居所里收拾得整洁有序。很快，火让一切变得温暖、快乐和惬意。我在火堆旁坐下，烤着双手，听着外面的风雨声。&lt;/p&gt;

&lt;p&gt;当时我就想啊，也许我之前的人生受尼采的“超人哲学”影响很大，很多事情只有一个标准，就是做到极致，即使自己的身体已经远远超过极限了，还在逼迫自己坚持，即使身体通过各种维度告诉我 ”我已经受不了了“ ，还在通过思想去谴责自己的 ‘软弱’ 。&lt;/p&gt;

&lt;p&gt;现在我想明白了，人的身体也好，思想也好，本质上还是一个能量有限的个体，有它的极限，很多事情要顺其自然，累的时候就休息一下，不管外界发生任何事情，都不关自己的事情。&lt;/p&gt;

&lt;p&gt;先像一行禅师那样，把洒落在内心各处的回忆，情绪，疲劳一张张的慢慢捡起来放好，给自己的内心生上一堆火，慢慢的让心平静下来。&lt;/p&gt;

&lt;p&gt;休息够了，内心不再乱了，就可以重新启航了。&lt;/p&gt;

&lt;h3 id=&quot;第一次花开&quot;&gt;第一次花开&lt;/h3&gt;

&lt;p class=&quot;line-quote&quot;&gt;正念是我修行的基本。正念意味着安住于此时此刻，并觉知万事万物—在我们之内和之外的所有积极和消极的因素。我们学习滋养积极因素，学习认识、拥抱和改变消极因素。&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;我们可以快乐地安住于此时此刻。我们可以每天提醒自己，这样的修习并不是为了到达某地或获得某物。修习本身就是在寻找的快乐和平静，修习就是终点。&lt;/p&gt;

&lt;p&gt;以前有很长一段时间，看了很多各种各样的书，总是提醒自己要多学习各种各样的知识，然后才能在未来变成更好的自我，即使当时的我已经非常好了，也会从未来穿越回来告诉自己现在还不够好，长此以往，自己便陷入每天都对自己不满意的焦虑中，即使今天什么事情都没有，还是对自己不满意。&lt;/p&gt;

&lt;p&gt;现在明白了生活分为三个部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;正念修行，让自己每天知道，修行的目的不是未来某一天怎么怎么样，而是当下的每时每刻，如果不能享受当下的一切，过去和未来都毫无意义，当下才是最重要的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;每天都是新的一天，每天遇到开心和不开心的事情再正常不过，只要保持正念，努力的学习知识和工作，能够积极的解决问题就好，知识只是工具，再广博的知识无非就是一个强大的大脑，如果没有正念的内心，人不过就是解决现实问题的机器，即使解决的再好，没有内心的一隅平静，解决完一个问题后会迎来一个更大的不满足和空虚。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;多微笑一下，不管陪伴家人，和朋友聊天还是面对客户，多笑一下，当然不是那种苦笑，而是你内心平静叠加积极乐观的心态后，发自内心的微笑，那种可以向别人传递正能量的微笑。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;现在我明白了，佛教不再是我以前理解的，要在当世忍受一切去寻求来世的那种虚幻，真正的修行是在当下，活在此时此刻就是平静，活在此时此刻就是修行的终点，不是过去，也不是未来。我们不需要对未来有任何期待即可获得平静。&lt;/p&gt;

&lt;h3 id=&quot;谷歌普莱克斯&quot;&gt;谷歌普莱克斯&lt;/h3&gt;

&lt;p class=&quot;line-quote&quot;&gt;2013年，我在加利福尼亚谷歌总部—他们称之为“谷歌普莱克斯”—带领谷歌员工进行一天正念修习。我们团体有七十多名僧尼，而那天报名的谷歌员工有七百多人。我们一早就开始了，带领大家静坐、行禅、正念饮食和放松禅—与我们在梅村禅修中心的正念日完全一致。&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;这些谷歌人年轻聪颖，富有创造力，我们能看出来他们将自己的全身心都投入到了修习当中。他们非常专注，修习得非常好。我想，他们之所以如此用心修习，是因为他们所遭受的痛苦。他们对能帮助他们减轻痛苦的精神修习如饥似渴。我们知道他们一直非常努力地工作。所有的公司都为“成功”而奋斗，人人都希望成为“第一”。正因如此，许多年轻人倾尽所有时间和精力于工作和公司，没有时间照顾自己的身体、感受、情绪和关系。即便有时间，他们可能也不知道如何利用那些时间来真正地照料身体和心灵。&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;我为大家分享了如何行禅，随后，我们便围绕园区慢慢地、正念地、安静地行走，开始这一天。差不多十五分钟后，我们安静地坐下来，一声不响。我双手举着我的茶，一边享用，一边等着大家到来，等着他们全都坐下并跟随自己的呼吸。我们在那儿平静地坐了很久，享受着清晨的寂静和宁谧。与此同时，许多员工陆陆续续前来上班，每次有人来到角落附近时，他们都会突然惊呆。他们看到了异样：许多人坐在地上，什么也不做，只是呼吸着。实在太安静！这完全是新鲜和意想不到的事情！时间胜过金钱，时间就是平和，时间就是生命。&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;我们中的许多人太忙碌，工作太努力，以致于没有时间生活。我们的工作占据了我们所有的生命。我们甚至可能沉迷工作，不仅因为我们需要金钱，更因为我们不知该如何处理内心的痛苦与孤独，所以我们在工作中寻找庇护。有时，我们不知该拿内心的孤独、痛苦和绝望怎么办。我们试着寻找某个事物来将它掩盖。我们检查邮件，我们拿起报纸，我们收听新闻，只要能忘掉内心的孤独和痛苦。我们的身体不得安宁，我们的心灵不得安宁，而我们却不知道该做什么。我们试着坐下，但一坐下，却又像坐在燃烧的煤炭上一样。我们可能会散散步，但一散步，却好像走在火焰上一样。&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;当不安的力量表现出来时，我们就不得不认识到正在发生的一切，然后说：“你好，我的‘不安’。我知道你在那里，我会好好照顾你的。”然后，我们开始修习正念呼吸，将我们的心带回我们的身体。当身心合而为一时，你就安住在此时此地，你便可以触碰到生命，并照料内心的感受。世界里有种种奇迹，如果继续如此卖力地工作，我们就没有足够的时间生活，没有足够的时间去接触生命的奇迹，去获得我们所需的滋养和治疗。我们必须有这样的见悟，以将我们自己从不安中释放出来。在“此刻”这个国度里，我们将接受我们所需的治疗。&lt;/p&gt;

&lt;p&gt;我想这就是我在深度最后几年的状态吧，每天都不安。&lt;/p&gt;

&lt;p&gt;当我放下过去的一切，现在用心写下我想的每一句话，每个标点，让内心的思绪从指间流淌在键盘上，变成比特流顺着因特网传递到你眼前时，现在的我，感谢过去经历的精彩和痛苦，现在的我无比的平静，无比的享受这种写作的心流状态，我内心无比的快乐 ;)&lt;/p&gt;

&lt;h3 id=&quot;最后&quot;&gt;最后&lt;/h3&gt;

&lt;p class=&quot;line-quote&quot;&gt;教育不单单是讲授，更在于你如何过自己的生活。我的人生就是我的教育，我的人生就是我的讯息。&lt;/p&gt;

&lt;p&gt;这句话也是《活在此时此刻》这本书的最后一句话，人，我们自己当下的一言一行就是最好的自己，最好的教育以及对别人最好的激励。&lt;/p&gt;

&lt;p&gt;当下我们的状态才是最好的教育，而不是知识，学识，作品…&lt;/p&gt;</content><author><name></name></author><summary type="html">最近读了一行禅师写的《活在此时此刻》，最开始是在书店闲逛的时候看到的，回家买了Kindle版，花了一个月的时间慢慢读这本书。</summary></entry><entry><title type="html">Linux下实现打开或切换应用的功能</title><link href="http://localhost:4000/linux/2019/09/13/open-or-raise.html" rel="alternate" type="text/html" title="Linux下实现打开或切换应用的功能" /><published>2019-09-13T00:00:00+08:00</published><updated>2019-09-13T00:00:00+08:00</updated><id>http://localhost:4000/linux/2019/09/13/open-or-raise</id><content type="html" xml:base="http://localhost:4000/linux/2019/09/13/open-or-raise.html">&lt;p&gt;Mac下缺少强大的窗口管理器，而我讨厌使用鼠标低效率的切换应用，所以我使用HammerSpoon的&lt;a href=&quot;https://github.com/manateelazycat/hammerspoon-config/blob/d741f22e8bfaa07930701cf9d6fef789693b4e3a/init.lua#L194&quot;&gt;application.launchOrFocus&lt;/a&gt;来实现打开或切换应用的功能：当一个应用没有打开的时候直接打开，如果一个应用已经打开了就切换到已经打开的窗口。&lt;/p&gt;

&lt;p&gt;最近切换回Linux的环境下，也想保持和Mac同样的使用习惯，避免在Linux和Mac切换时手指发懵。&lt;/p&gt;

&lt;p&gt;在Linux下实现这种功能就简单的多了，我们可以使用 wmctrl 来实现：&lt;/p&gt;

&lt;h3 id=&quot;安装-wmctrl&quot;&gt;安装 wmctrl&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; wmctrl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;原理&quot;&gt;原理&lt;/h3&gt;
&lt;p&gt;然后使用命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;wmctrl -x -a window_name || application_name&lt;/code&gt; 即可完成我们想要的功能&lt;/p&gt;

&lt;p&gt;其中，&lt;code class=&quot;highlighter-rouge&quot;&gt;window_name&lt;/code&gt; 是窗口名字，&lt;code class=&quot;highlighter-rouge&quot;&gt;application_name&lt;/code&gt; 是应用的启动命令&lt;/p&gt;

&lt;p&gt;wmctrl首先会根据我们提供的窗口名字尝试切换窗口，如果没有发现可以切换的窗口则调用启动命令来启动应用。&lt;/p&gt;

&lt;h3 id=&quot;获取窗口名字&quot;&gt;获取窗口名字&lt;/h3&gt;

&lt;p&gt;有时候窗口名字并不一定可以直观的猜到，可以在终端中使用命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;xprop WM_CLASS&lt;/code&gt; , 然后用鼠标点一下想要获取属性的窗口，就可以知道目标窗口的名字了。&lt;/p&gt;

&lt;h3 id=&quot;配置应用命令&quot;&gt;配置应用命令&lt;/h3&gt;

&lt;p&gt;下面是我常用的一些命令：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Google Chrome: &lt;code class=&quot;highlighter-rouge&quot;&gt;wmctrl -x -a chrome || google-chrome-stable&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Emacs: &lt;code class=&quot;highlighter-rouge&quot;&gt;wmctrl -x -a emacs || emacs&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Deepin Terminal: &lt;code class=&quot;highlighter-rouge&quot;&gt;wmctrl -x -a deepin-terminal || deepin-terminal&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Netease Cloud Music: &lt;code class=&quot;highlighter-rouge&quot;&gt;wmctrl -x -a netease-cloud-music || netease-cloud-music&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;System Settings: &lt;code class=&quot;highlighter-rouge&quot;&gt;wmctrl -x -a systemsettings5 || systemsettings5&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;File manager: &lt;code class=&quot;highlighter-rouge&quot;&gt;wmctrl -x -a dolphin || dolphin&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Calibre: &lt;code class=&quot;highlighter-rouge&quot;&gt;wmctrl -x -a calibre-ebook-viewer || calibre&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all, enjoy! ;)&lt;/p&gt;</content><author><name></name></author><summary type="html">Mac下缺少强大的窗口管理器，而我讨厌使用鼠标低效率的切换应用，所以我使用HammerSpoon的application.launchOrFocus来实现打开或切换应用的功能：当一个应用没有打开的时候直接打开，如果一个应用已经打开了就切换到已经打开的窗口。</summary></entry><entry><title type="html">在Linux版的Emacs中使用RIME输入法</title><link href="http://localhost:4000/emacs/2019/09/12/make-rime-works-with-linux.html" rel="alternate" type="text/html" title="在Linux版的Emacs中使用RIME输入法" /><published>2019-09-12T00:00:00+08:00</published><updated>2019-09-12T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2019/09/12/make-rime-works-with-linux</id><content type="html" xml:base="http://localhost:4000/emacs/2019/09/12/make-rime-works-with-linux.html">&lt;p&gt;之前写了一篇文章&lt;a href=&quot;https://manateelazycat.github.io/emacs/2019/07/24/use-rime-in-emacs.html&quot;&gt;«在Mac版的Emacs中使用RIME输入法»&lt;/a&gt;详细说明了Mac OS下怎么让Emacs使用RIME输入法。最近又折腾回我最喜欢的Linux，今天讲一下怎么在Linux下配置Emacs的RIME输入法。&lt;/p&gt;

&lt;p&gt;其实大多数步骤都是类似的，而且Linux下还要简单点，只不过有一些小小的坑。&lt;/p&gt;

&lt;h3 id=&quot;1-更新pyim和posframe到最新版&quot;&gt;1 更新pyim和posframe到最新版&lt;/h3&gt;
&lt;p&gt;为了支持RIME输入法需要把 &lt;a href=&quot;https://github.com/tumashu/pyim&quot;&gt;pyim&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/tumashu/posframe&quot;&gt;posframe&lt;/a&gt;这两个库更新到最新，否则有可能会报posframe的错误&lt;/p&gt;

&lt;h3 id=&quot;2-安装rime输入法&quot;&gt;2 安装RIME输入法&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; fcitx-im fcitx-configtool fcitx-rime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 ~/.xprofile 文件中写入&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GTK_IM_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fcitx
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;QT_IM_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fcitx
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;XMODIFIERS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@im=fcitx&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重新登录&lt;/p&gt;

&lt;h3 id=&quot;3-安装librime&quot;&gt;3 安装librime&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; librime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-编译liberime&quot;&gt;4 编译liberime&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://gitlab.com/liberime/liberime.git &lt;span class=&quot;nt&quot;&gt;--depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;liberime
make liberime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的命令会在 liberime/build/ 目录下生成 liberime.so 动态库&lt;/p&gt;

&lt;h3 id=&quot;5-配置pyim&quot;&gt;5 配置pyim&lt;/h3&gt;
&lt;p&gt;拷贝 liberime.so 文件到 ~/.emacs.d/ 目录下，然后在 ~/.emacs 写下如下配置即可:&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;load-path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file-truename&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;~/.emacs.d/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;load-path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'pyim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'posframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'liberime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;default-input-method&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pyim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pyim-page-tooltip&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'posframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pyim-page-length&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;liberime-start&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/usr/share/rime-data/&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file-truename&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;~/.emacs.d/pyim/rime/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;liberime-select-schema&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;luna_pinyin_simp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pyim-default-scheme&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'rime-quanpin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;6-增加rime候选词数量&quot;&gt;6 增加RIME候选词数量&lt;/h3&gt;

&lt;p&gt;liberime默认只能获取5个后选词，用下面的方法可以增加RIME后端时的后选词数量。&lt;/p&gt;

&lt;p&gt;创建 ~/.emacs.d/pyim/rime/default.custom.yaml 文件，内容如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;patch:
     &lt;span class=&quot;s2&quot;&gt;&quot;menu/page_size&quot;&lt;/span&gt;: 100
     &lt;span class=&quot;s2&quot;&gt;&quot;speller/auto_select&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&quot;speller/auto_select_unique_candidate&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;区别&quot;&gt;区别&lt;/h2&gt;

&lt;p&gt;Linux版的安装步骤总体比Mac要简单很多，下面是这两个系统的区别：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Linux下直接安装librime这个包就可以了，不需要Mac去手动编译 librime.1.dylib 这个库&lt;/li&gt;
  &lt;li&gt;Linux下 liberime.so 这个动态库，直接 make 一下就好了，不需要像Mac那样那么麻烦&lt;/li&gt;
  &lt;li&gt;Linux下 &lt;code class=&quot;highlighter-rouge&quot;&gt;liberime-start&lt;/code&gt; 函数的第一个路径是 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/rime-data/&lt;/code&gt; , Mac下是 &lt;code class=&quot;highlighter-rouge&quot;&gt;/Library/Input Methods/Squirrel.app/Contents/SharedSupport&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;主要的坑在于 Emacs 27 执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;(liberime-start &quot;/usr/share/rime-data/&quot; (file-truename &quot;~/.emacs.d/pyim/rime/&quot;))&lt;/code&gt; 的时候会崩溃，切换回 Emacs 26.3 正式版以后问题就解决了，最开始不知道是这个原因，花了十几分钟研究，最后通过 gdb 定位问题。&lt;/p&gt;

&lt;p&gt;现在Linux版的Emacs也可以愉快的用RIME来输入中文了。&lt;/p&gt;</content><author><name></name></author><summary type="html">之前写了一篇文章«在Mac版的Emacs中使用RIME输入法»详细说明了Mac OS下怎么让Emacs使用RIME输入法。最近又折腾回我最喜欢的Linux，今天讲一下怎么在Linux下配置Emacs的RIME输入法。</summary></entry><entry><title type="html">读《当下的力量》</title><link href="http://localhost:4000/reading/2019/08/29/reading-living-in-the-moment.html" rel="alternate" type="text/html" title="读《当下的力量》" /><published>2019-08-29T00:00:00+08:00</published><updated>2019-08-29T00:00:00+08:00</updated><id>http://localhost:4000/reading/2019/08/29/reading-living-in-the-moment</id><content type="html" xml:base="http://localhost:4000/reading/2019/08/29/reading-living-in-the-moment.html">&lt;p&gt;花了几个月时间终于把朋友推荐的这本书《当下的力量》看完，如果从篇幅看这本书我两天就可以看完，但是朋友说我以前是用脑子在读书，而不是用心在读书。&lt;/p&gt;

&lt;p&gt;所以，这几个月，每天限制只看其中一段，用心去领悟这本书告诉我的很多道理，也解惑了我原来想不明白的很多事情。&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;焦虑、紧张、不安、压力、烦恼——所有形式的恐惧，都是因为对未来过于关注而对当下关注不够所引起的。
愧疚、后悔、悲伤、怨恨、痛苦以及所有形式的不宽恕都是由过于关注过去而很少关注当下时刻引起的。&lt;/p&gt;

&lt;p&gt;30岁以前活得非常痛苦和焦虑，现在看来原因很简单，因为小时候受过的苦难，久久不能忘怀，时常用拼命工作的方式逃避过去，当累了一天躺在床上，痛苦的过去一直像一台放映机一样在我脑海中一遍又一遍的播放，回味这么多年的痛苦美酒，越痛苦越上瘾，越无法自拔。&lt;/p&gt;

&lt;p&gt;在这种痛苦叠加的过去下，我内心一直处于非常紧绷的高度危机感，总是认为当下不安全，只有拼命工作才能在未来的某一天解救自己, 未来的那一天在什么时候？原来一直告诉我，在把深度操作系统做成微软那么成功的时候，当自己有一天不会再为生活奔波，一心一意只做自己喜欢的事情的时候。&lt;/p&gt;

&lt;p&gt;可是，真相是什么呢？工作和生活的困难只会一个一个的接一个来，你即使用尽全力，即使做再好，可是看着昨天的自己，还是有那么多不完美的地方，然后每天都生活在逃避过去痛苦，期待未来的焦虑中，长时间的这种状态导致我越来越疲惫，越来越迷茫，不知道怎么解救自己？&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;我们并不否认，当你不再认同你的痛苦之身时，你会遭受强烈的内在抗拒，特别是如果你大半生都强烈地与你的痛苦之身认同，并且从中汲取自我感的话，就更是如此。也就是说你从你的痛苦中创造了一个不幸的自我，并且认为这个由大脑创造的幻觉就是你。在这种情况下，害怕失去自我认同的无意识恐惧，会强烈地抗拒任何摆脱这个思维认同的努力。换句话说，你可能宁愿在痛苦中，与痛苦之身认同，也不愿冒风险去丢失你熟悉的不幸自我而跃入一个未知之中。&lt;/p&gt;

&lt;p&gt;看到书中这段话的时候，我仿佛看到了自己一样，我之前的努力也好，拼命也好，本质上还是对一种我自己痛苦过去的认同，痛苦的太久了，痛苦变成了生活的必需，并时常以 “痛并快乐着” 来进行自我安慰，认为世界就是一个又一个的痛苦和苦难，只要我拼命的努力，总有一天我会超越痛苦的，不再痛苦，殊不知在长时间的挣扎中，痛苦已经变成了不由自主的自我的一部分，痛苦加上对未来的恐惧，导致了对自己和世界深深的误解，不但会影响自己，家人甚至会影响到身边的朋友。&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;无论何时，当你需要一个答案、一个解决方案或一个创意时，停止思维片刻，把你的注意力集中在你内在的能量场上，觉察这种内在的平静状态。当你重新开始思考时，你的思维将会变得新鲜且具有创造性。在任何思维活动中，请习惯性地徘徊于思考和对内心的倾听之间。我们可以这样说：别用你的大脑思考问题，而是用你的身体去思考问题。&lt;/p&gt;

&lt;p&gt;我是一个用脑特别多的人，特别有时候写代码的时候会进入纯粹逻辑思维的那种心流状态，以前对 “活在当下” 的理解就是只要我时刻保持努力的状态，时刻保持写代码这种心流的忙碌状态，只要我保持的时间足够长，我就生活在这种 “忙碌的当下” 中，我就不会被过去的痛苦和未来的焦虑而打扰。&lt;/p&gt;

&lt;p&gt;从大脑的层面上看，当我专注当下的忙碌过程中时，是一种形式的当下，因为脑袋里面不可能又专注解决当下的问题又焦虑未来，脑袋会短暂的忘记过去和未来。但是我一直没有解决的问题是，一旦我累了，一旦没有在写代码的时候，大脑又会进入过去和未来，无时无刻的折磨自己。&lt;/p&gt;

&lt;p&gt;看完这本书，我明白了我的困扰，我的困扰现在也就烟消云散了：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;原来我一直认为大脑最重要，大脑代表理智和知识，其实大脑只是工具，能感受这个世界美的身体才最重要&lt;/li&gt;
  &lt;li&gt;身体也许会出现疾病，但是身体本身不会痛苦和焦虑，大脑才是造成痛苦和焦虑的根本原因&lt;/li&gt;
  &lt;li&gt;对过去痛苦的回忆和对未来的无穷焦虑，是大脑为了自我认同自我创造的高清电影，通过自我放映来影响我们的判断，最终通过痛苦和焦虑让我们沉浸在大脑的控制中，因为大脑需要你输送痛苦和焦虑让它来解决问题，大脑只有通过解决问题的方式才能刷存在感&lt;/li&gt;
  &lt;li&gt;我们在身体健康的时候，我们没有任何问题，我们不需要大脑来伪造这些问题，我们只需感受这一切，努力生活即可，当下即宁静&lt;/li&gt;
  &lt;li&gt;当我们痛苦和焦虑时，做为一个观察者去观察这些现象，不要带任何批判的角度去尝试纠正痛苦和焦虑，因为他们只是大脑虚幻出来的东西，不需要你纠正什么，当你把大脑当作一个工具去观察它自己时候，大脑的机制导致它没有任何多余的能量在观察自己的同时沉迷于痛苦和焦虑，只要我们不带任何感情的进入内观状态时，过去的痛苦和未来的焦虑就会自动消失，当他们消失的时候，你的身体就已经活在当下了&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最后这一条对我的帮助特别大，以前看了一些佛学的书籍，很多年前也去北京的龙泉寺体验了几天诵经念佛的生活，其实我一直不明白佛学怎么在入世中做到佛陀说的修行。&lt;/p&gt;

&lt;p&gt;《当下的力量》这本书其实从另外一个角度去告诉普通人，像我这样的普通人，怎么去领悟佛学所说的 “内观” 。&lt;/p&gt;

&lt;p&gt;在这个世界上，很多事情，我们不可能一帆风顺，当很多好的和坏的事情发生的时候，我们除了积极的面对问题外，我们其实什么都改变不了，因为过去已经发生了，未来事事无常我们控制不了。&lt;/p&gt;

&lt;p&gt;而我们唯一能够做到“活在当下”的方式就是，观察这个世界发生的一切，向内观察我们自己真实的本我，真实的身体感受，身体做为世界的感受器，当我们真实的去体验而不是用脑袋去思考的时候，会发现已经发生的过去和无常的未来对于我们都没有意义，只有当下，此时此刻你看我文章的这一刻才充满力量，既然过去已经发生，未来变幻无常，为什么我们基于过去和未来而产生的痛苦和焦虑去折磨自己呢？&lt;/p&gt;

&lt;p&gt;正是看了整本书，我完全接纳了世界和我过去的自己，我现在已经不会再收到痛苦和焦虑的干扰了，而什么是真正的宁静呢？真正身体感受到的平静呢？原来我在旅游的时候，短暂的体验了这种宁静：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;早晨光脚站在沙漠时，感觉身体的温度顺着双脚流入沙子时，感觉到那种自然才能给我的放松&lt;/li&gt;
  &lt;li&gt;当我登上红岩顶后，周围都是积雪，看向远方的贡嘎雪山的那种由内向外的敬畏&lt;/li&gt;
  &lt;li&gt;坐在泸沽湖边，感受湖面的平静和采菊东篱下的一切…&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以前我总是期望通过周游世界来寻找答案，其实当你真正的进入内观后，你随处可以体验到内心的宁静：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;早上5点遛狗的时候，一个人都没有，闭着眼睛可以闻到旁边小草和花的芬芳&lt;/li&gt;
  &lt;li&gt;躺在石凳上，吹着和煦的风，可以听到抑扬顿挫的风声&lt;/li&gt;
  &lt;li&gt;坐在电脑前，写完Emacs插件后分享出去的那一刻，从不管到底插件有没有用，就是因为喜欢而写&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当我们真正进入内观状态后，心会告诉你这个世界什么才是真正重要的东西，就是你与这个世界的链接，你为这个世界的美而赞叹，你充满爱的去努力，去和别人相处，那种充满善意和爱的感觉去和别人交流，体验这一切，才是真正值得的东西。&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;如果你过于注重目标，或许因为你在寻找幸福或成就，成为一个更圆满的自我感，这时你就没有在关注当下了。当下失去了固有的价值，而沦为通向未来的踏脚石。这样钟表时间就变成了心理时间。这时，你生命的旅程不再是一场奇妙的探险，它变成了一个为了达到目标、获得成就的强迫性需要。你不会再看到路边的花朵或闻到它的芬芳，也不会觉察到存在于当下的围绕着你生命的美丽。&lt;/p&gt;

&lt;p&gt;原来一直认为人必须事业有成，而事业有成的前提是工作很努力，达到一个又一个的目标，以致于最后因为工作放弃了太多太多的东西。
其实当人的好的习惯养成以后，工作只是你长时间努力的一个结果而已，但是工作不能变成所有，不能变成你所有事情最后的意义。&lt;/p&gt;

&lt;p&gt;当我们撕下工作上的各种标签以后，我们和内心有多么符合？其实人活着，应该尽量去体验这个世界，尽量让自己真实和充满爱，工作真的只是我们体验生活的一部分，但不是全部。&lt;/p&gt;

&lt;p&gt;当工作不再是强迫性逼迫你必须认同未来的工具，你就是你，你依然可以很努力，依然可以做计划，但是所有你需要的只是在当下做你自己，未来可能会因为现在的努力变得更好，但是事事无常，很多事情你即使做了也不一定有你期望的结果，顺气自然，接纳一切，继续活在当下，一切最终会变得更好。&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;接受生活的现实就是活在一种恩典、安逸和轻松的状态里。这种状态不再取决于事情的好坏。这看似自相矛盾，但是当你不再依赖事物的外在形式之后，你的生活状况、外在形式就会有很大的改善。
接受当下的现实，然后采取行动，尽最大的努力从泥沼中摆脱出来。这种行动叫积极的行动，它比产生于愤怒、绝望或挫折的消极行为更具威力。不对当下时刻贴任何心理标签，不断地臣服于当下，直到你取得理想的结果。
对于有些人来说，臣服可能很消极，意味着失败、放弃、无法面对生活中的挑战、迟钝、退缩等。然而，真正的臣服是与这些完全不同的。它不是说消极地去忍受你生活中出现的任何情况，不做任何努力，也不是说停止制订计划或采取积极的行动。&lt;/p&gt;

&lt;p&gt;我一直对佛学有一种误解，认为无为和臣服就是认命和接受现状，什么都不做, 既然什么都不做，那修行有什么意义？&lt;/p&gt;

&lt;p&gt;现在我明白了，其实臣服是不要因为已经发生的好的事情或坏的事情而产生消极的抗拒，俗称抱怨。&lt;/p&gt;

&lt;p&gt;原来我一直认为世间应该有对和错，大部分的对其实是社会环境标准，大部分的错其实是和我个人认知的冲突，最后跌跌撞撞发现，其实世间没有绝对的对和错，而且往往对和错时相互融合的。原来太看重要坚持做对的事情的同时，希望别人也一起做对的事情，其实世间很多事情是我们怎么也无法改变的，就像很多人其实无法改变我自己一样，接纳世间的好于坏，专注于当下积极的行动才是我们真正应该做的。&lt;/p&gt;

&lt;p&gt;就像龙泉寺的和尚说的一样，吃饭就吃饭，睡觉就睡觉，吃饭睡觉皆修行。&lt;/p&gt;

&lt;p&gt;现在不再纠结要做多大的事情，去影响世界，改变世界，做好自己的每一天，人生那么长，一定可以改变世界很多，但是首先要先做好自己。&lt;/p&gt;

&lt;p class=&quot;line-quote&quot;&gt;你生活的外在情况和生活中所发生的任何事情，都是这个湖泊的表面。随着循环和季节的变化，湖面有时平静，有时波澜起伏。然而在湖的深处，总是宁静的。你就是整个大湖，不仅仅是湖的表面而且还是湖的底部，永远都是绝对的宁静。&lt;/p&gt;

&lt;p&gt;现在每天我都会给自己很多时间，当自己沉溺于过去或者焦虑未来的时候，就进入自我观察的状态去感知和接受心中的波澜，感知到一切只不过是大脑对自我的映射，身体才是真实的…&lt;/p&gt;

&lt;p&gt;内观真是非常了不起的一种方法，让我的内心进入了一种新的宁静。我想这就是认真感受这本书后获得的东西：当下的力量&lt;/p&gt;

&lt;p&gt;什么时候我们活着当下了？当我们不再问我们这个问题的时候…&lt;/p&gt;</content><author><name></name></author><summary type="html">花了几个月时间终于把朋友推荐的这本书《当下的力量》看完，如果从篇幅看这本书我两天就可以看完，但是朋友说我以前是用脑子在读书，而不是用心在读书。</summary></entry><entry><title type="html">Snails 6.0 发布了</title><link href="http://localhost:4000/emacs/2019/08/25/snails-6.0.html" rel="alternate" type="text/html" title="Snails 6.0 发布了" /><published>2019-08-25T00:00:00+08:00</published><updated>2019-08-25T00:00:00+08:00</updated><id>http://localhost:4000/emacs/2019/08/25/snails-6.0</id><content type="html" xml:base="http://localhost:4000/emacs/2019/08/25/snails-6.0.html">&lt;p&gt;今天早上新加了一个&lt;a href=&quot;https://github.com/manateelazycat/snails/commit/4b9d14311d0920ea6bf4d3a770e2a1257038561f&quot;&gt;补丁&lt;/a&gt;, 发布了 Snails 最新版本 6.0&lt;/p&gt;

&lt;h3 id=&quot;按前缀来搜索不同的内容&quot;&gt;按前缀来搜索不同的内容&lt;/h3&gt;
&lt;p&gt;Snails 6.0 的主要更新是支持像VSCode那样根据前缀来搜索不同的后端内容。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Snails启动后，默认在标签分组、缓存列表、最近访问文件、书签这些最高频的后端中进行搜索，以快速切换正在使用的文件&lt;/li&gt;
  &lt;li&gt;当输入中包含前缀 &amp;gt; 时，Snails搜索所有可以执行的命令&lt;/li&gt;
  &lt;li&gt;当输入中包含前缀 @ 时，Snails只在函数或变量定义中进行搜索，方便快速进行定义跳转&lt;/li&gt;
  &lt;li&gt;当输入中包含前缀 # 时，Snails使用 ripgrep 搜索当前文件的内容&lt;/li&gt;
  &lt;li&gt;当输入中包含前缀 ! 时，Snails使用 ripgrep 搜索当前项目里所有文件的内容&lt;/li&gt;
  &lt;li&gt;当输入中包含前缀 ? 时，Snails使用 fd、projectile、mdfind、everything 等后端进行全局文件名搜索，以快速找到并打开磁盘中的文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样设计的作用是，Snails默认只搜索打开的文件，符合99%的默认使用习惯，当用户需要特殊搜索，比如函数定义的时候，可以在输入的内容加上前缀 ，使得Snails只在用户指定的后端中进行定向搜索。&lt;/p&gt;

&lt;p&gt;通过这样的设计，可以同时满足绝大多数用户的使用习惯，又不会因为默认加入太多的后端导致搜索信息过多的问题，最终提升用户的搜索效率。&lt;/p&gt;

&lt;h3 id=&quot;自定义搜索后端&quot;&gt;自定义搜索后端&lt;/h3&gt;
&lt;p&gt;当然，如果你不喜欢前缀的方案，可以通过自定义后端列表的方式进行自定义搜索:&lt;/p&gt;
&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;snails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;snails-backend-buffer&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;snails-backend-current-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;比如按照上面的示例，Snails只会在缓存列表和当前文件内容这两个后端中进行搜索，并且忽略用户输入的任何前缀，这种自定义后端的搜索体验和Helm的体验保持一致。&lt;/p&gt;

&lt;p&gt;如果你只自定义一种后端，搜索体验将和Ivy保持一致。&lt;/p&gt;

&lt;p&gt;That’s all, enjoy!&lt;/p&gt;</content><author><name></name></author><summary type="html">今天早上新加了一个补丁, 发布了 Snails 最新版本 6.0</summary></entry></feed>